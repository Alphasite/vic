package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// InteractionJoinHandlerFunc turns a function with the right signature into a interaction join handler
type InteractionJoinHandlerFunc func(InteractionJoinParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InteractionJoinHandlerFunc) Handle(params InteractionJoinParams) middleware.Responder {
	return fn(params)
}

// InteractionJoinHandler interface for that can handle valid interaction join params
type InteractionJoinHandler interface {
	Handle(InteractionJoinParams) middleware.Responder
}

// NewInteractionJoin creates a new http.Handler for the interaction join operation
func NewInteractionJoin(ctx *middleware.Context, handler InteractionJoinHandler) *InteractionJoin {
	return &InteractionJoin{Context: ctx, Handler: handler}
}

/*InteractionJoin swagger:route POST /interaction interaction interactionJoin

Add interaction capability

Adds interaction capabilities to given handle

*/
type InteractionJoin struct {
	Context *middleware.Context
	Handler InteractionJoinHandler
}

func (o *InteractionJoin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewInteractionJoinParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

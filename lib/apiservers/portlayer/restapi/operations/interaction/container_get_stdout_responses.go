package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*ContainerGetStdoutOK OK

swagger:response containerGetStdoutOK
*/
type ContainerGetStdoutOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewContainerGetStdoutOK creates ContainerGetStdoutOK with default headers values
func NewContainerGetStdoutOK() *ContainerGetStdoutOK {
	return &ContainerGetStdoutOK{}
}

// WithPayload adds the payload to the container get stdout o k response
func (o *ContainerGetStdoutOK) WithPayload(payload io.ReadCloser) *ContainerGetStdoutOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container get stdout o k response
func (o *ContainerGetStdoutOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerGetStdoutOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ContainerGetStdoutNotFound Container not found

swagger:response containerGetStdoutNotFound
*/
type ContainerGetStdoutNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerGetStdoutNotFound creates ContainerGetStdoutNotFound with default headers values
func NewContainerGetStdoutNotFound() *ContainerGetStdoutNotFound {
	return &ContainerGetStdoutNotFound{}
}

// WithPayload adds the payload to the container get stdout not found response
func (o *ContainerGetStdoutNotFound) WithPayload(payload *models.Error) *ContainerGetStdoutNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container get stdout not found response
func (o *ContainerGetStdoutNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerGetStdoutNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ContainerGetStdoutInternalServerError Failed to get stdout

swagger:response containerGetStdoutInternalServerError
*/
type ContainerGetStdoutInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerGetStdoutInternalServerError creates ContainerGetStdoutInternalServerError with default headers values
func NewContainerGetStdoutInternalServerError() *ContainerGetStdoutInternalServerError {
	return &ContainerGetStdoutInternalServerError{}
}

// WithPayload adds the payload to the container get stdout internal server error response
func (o *ContainerGetStdoutInternalServerError) WithPayload(payload *models.Error) *ContainerGetStdoutInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container get stdout internal server error response
func (o *ContainerGetStdoutInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerGetStdoutInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

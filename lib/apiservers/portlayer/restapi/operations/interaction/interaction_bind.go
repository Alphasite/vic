package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// InteractionBindHandlerFunc turns a function with the right signature into a interaction bind handler
type InteractionBindHandlerFunc func(InteractionBindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InteractionBindHandlerFunc) Handle(params InteractionBindParams) middleware.Responder {
	return fn(params)
}

// InteractionBindHandler interface for that can handle valid interaction bind params
type InteractionBindHandler interface {
	Handle(InteractionBindParams) middleware.Responder
}

// NewInteractionBind creates a new http.Handler for the interaction bind operation
func NewInteractionBind(ctx *middleware.Context, handler InteractionBindHandler) *InteractionBind {
	return &InteractionBind{Context: ctx, Handler: handler}
}

/*InteractionBind swagger:route POST /interaction/binding interaction interactionBind

Enable/bind/activate the VirtualDevice

Enable/bind/activate the VirtualDevice

*/
type InteractionBind struct {
	Context *middleware.Context
	Handler InteractionBindHandler
}

func (o *InteractionBind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewInteractionBindParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

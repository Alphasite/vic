package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ContainerGetStdoutHandlerFunc turns a function with the right signature into a container get stdout handler
type ContainerGetStdoutHandlerFunc func(ContainerGetStdoutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerGetStdoutHandlerFunc) Handle(params ContainerGetStdoutParams) middleware.Responder {
	return fn(params)
}

// ContainerGetStdoutHandler interface for that can handle valid container get stdout params
type ContainerGetStdoutHandler interface {
	Handle(ContainerGetStdoutParams) middleware.Responder
}

// NewContainerGetStdout creates a new http.Handler for the container get stdout operation
func NewContainerGetStdout(ctx *middleware.Context, handler ContainerGetStdoutHandler) *ContainerGetStdout {
	return &ContainerGetStdout{Context: ctx, Handler: handler}
}

/*ContainerGetStdout swagger:route GET /interaction/{id}/stdout interaction containerGetStdout

Get stdout

Get a stdout for the container

*/
type ContainerGetStdout struct {
	Context *middleware.Context
	Handler ContainerGetStdoutHandler
}

func (o *ContainerGetStdout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewContainerGetStdoutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

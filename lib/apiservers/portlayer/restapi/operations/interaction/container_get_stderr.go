package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ContainerGetStderrHandlerFunc turns a function with the right signature into a container get stderr handler
type ContainerGetStderrHandlerFunc func(ContainerGetStderrParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerGetStderrHandlerFunc) Handle(params ContainerGetStderrParams) middleware.Responder {
	return fn(params)
}

// ContainerGetStderrHandler interface for that can handle valid container get stderr params
type ContainerGetStderrHandler interface {
	Handle(ContainerGetStderrParams) middleware.Responder
}

// NewContainerGetStderr creates a new http.Handler for the container get stderr operation
func NewContainerGetStderr(ctx *middleware.Context, handler ContainerGetStderrHandler) *ContainerGetStderr {
	return &ContainerGetStderr{Context: ctx, Handler: handler}
}

/*ContainerGetStderr swagger:route GET /interaction/{id}/stderr interaction containerGetStderr

Get stderr

Get a stderr for the container

*/
type ContainerGetStderr struct {
	Context *middleware.Context
	Handler ContainerGetStderrHandler
}

func (o *ContainerGetStderr) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewContainerGetStderrParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

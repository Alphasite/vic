package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ContainerCloseStdinHandlerFunc turns a function with the right signature into a container close stdin handler
type ContainerCloseStdinHandlerFunc func(ContainerCloseStdinParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerCloseStdinHandlerFunc) Handle(params ContainerCloseStdinParams) middleware.Responder {
	return fn(params)
}

// ContainerCloseStdinHandler interface for that can handle valid container close stdin params
type ContainerCloseStdinHandler interface {
	Handle(ContainerCloseStdinParams) middleware.Responder
}

// NewContainerCloseStdin creates a new http.Handler for the container close stdin operation
func NewContainerCloseStdin(ctx *middleware.Context, handler ContainerCloseStdinHandler) *ContainerCloseStdin {
	return &ContainerCloseStdin{Context: ctx, Handler: handler}
}

/*ContainerCloseStdin swagger:route DELETE /interaction/{id}/stdin interaction containerCloseStdin

Close stdin

Close a stdin for the container

*/
type ContainerCloseStdin struct {
	Context *middleware.Context
	Handler ContainerCloseStdinHandler
}

func (o *ContainerCloseStdin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewContainerCloseStdinParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

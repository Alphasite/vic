package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// InteractionUnbindHandlerFunc turns a function with the right signature into a interaction unbind handler
type InteractionUnbindHandlerFunc func(InteractionUnbindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InteractionUnbindHandlerFunc) Handle(params InteractionUnbindParams) middleware.Responder {
	return fn(params)
}

// InteractionUnbindHandler interface for that can handle valid interaction unbind params
type InteractionUnbindHandler interface {
	Handle(InteractionUnbindParams) middleware.Responder
}

// NewInteractionUnbind creates a new http.Handler for the interaction unbind operation
func NewInteractionUnbind(ctx *middleware.Context, handler InteractionUnbindHandler) *InteractionUnbind {
	return &InteractionUnbind{Context: ctx, Handler: handler}
}

/*InteractionUnbind swagger:route DELETE /interaction/binding interaction interactionUnbind

Disable/unbind/deactivate the VirtualDevice

Disable/unbind/deactivate the VirtualDevice

*/
type InteractionUnbind struct {
	Context *middleware.Context
	Handler InteractionUnbindHandler
}

func (o *InteractionUnbind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewInteractionUnbindParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

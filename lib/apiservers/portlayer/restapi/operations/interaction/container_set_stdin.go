package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ContainerSetStdinHandlerFunc turns a function with the right signature into a container set stdin handler
type ContainerSetStdinHandlerFunc func(ContainerSetStdinParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerSetStdinHandlerFunc) Handle(params ContainerSetStdinParams) middleware.Responder {
	return fn(params)
}

// ContainerSetStdinHandler interface for that can handle valid container set stdin params
type ContainerSetStdinHandler interface {
	Handle(ContainerSetStdinParams) middleware.Responder
}

// NewContainerSetStdin creates a new http.Handler for the container set stdin operation
func NewContainerSetStdin(ctx *middleware.Context, handler ContainerSetStdinHandler) *ContainerSetStdin {
	return &ContainerSetStdin{Context: ctx, Handler: handler}
}

/*ContainerSetStdin swagger:route POST /interaction/{id}/stdin interaction containerSetStdin

Set stdin

Set a stdin for the container

*/
type ContainerSetStdin struct {
	Context *middleware.Context
	Handler ContainerSetStdinHandler
}

func (o *ContainerSetStdin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewContainerSetStdinParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*WaitOK OK

swagger:response waitOK
*/
type WaitOK struct {
}

// NewWaitOK creates WaitOK with default headers values
func NewWaitOK() *WaitOK {
	return &WaitOK{}
}

// WriteResponse to the client
func (o *WaitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*WaitNotFound not found

swagger:response waitNotFound
*/
type WaitNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWaitNotFound creates WaitNotFound with default headers values
func NewWaitNotFound() *WaitNotFound {
	return &WaitNotFound{}
}

// WithPayload adds the payload to the wait not found response
func (o *WaitNotFound) WithPayload(payload *models.Error) *WaitNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the wait not found response
func (o *WaitNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WaitNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*WaitInternalServerError Wait of task failed

swagger:response waitInternalServerError
*/
type WaitInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWaitInternalServerError creates WaitInternalServerError with default headers values
func NewWaitInternalServerError() *WaitInternalServerError {
	return &WaitInternalServerError{}
}

// WithPayload adds the payload to the wait internal server error response
func (o *WaitInternalServerError) WithPayload(payload *models.Error) *WaitInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the wait internal server error response
func (o *WaitInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WaitInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

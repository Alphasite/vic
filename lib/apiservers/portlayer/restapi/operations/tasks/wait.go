package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WaitHandlerFunc turns a function with the right signature into a wait handler
type WaitHandlerFunc func(WaitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WaitHandlerFunc) Handle(params WaitParams) middleware.Responder {
	return fn(params)
}

// WaitHandler interface for that can handle valid wait params
type WaitHandler interface {
	Handle(WaitParams) middleware.Responder
}

// NewWait creates a new http.Handler for the wait operation
func NewWait(ctx *middleware.Context, handler WaitHandler) *Wait {
	return &Wait{Context: ctx, Handler: handler}
}

/*Wait swagger:route PUT /tasks tasks wait

Initiates an task wait operation

Initiates an task wait operation

*/
type Wait struct {
	Context *middleware.Context
	Handler WaitHandler
}

func (o *Wait) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWaitParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

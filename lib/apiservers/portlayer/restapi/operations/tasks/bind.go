package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BindHandlerFunc turns a function with the right signature into a bind handler
type BindHandlerFunc func(BindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BindHandlerFunc) Handle(params BindParams) middleware.Responder {
	return fn(params)
}

// BindHandler interface for that can handle valid bind params
type BindHandler interface {
	Handle(BindParams) middleware.Responder
}

// NewBind creates a new http.Handler for the bind operation
func NewBind(ctx *middleware.Context, handler BindHandler) *Bind {
	return &Bind{Context: ctx, Handler: handler}
}

/*Bind swagger:route POST /tasks/binding tasks bind

Activate an existing task

Activate a task that exists within the context of the provided handle

*/
type Bind struct {
	Context *middleware.Context
	Handler BindHandler
}

func (o *Bind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewBindParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListVolumesHandlerFunc turns a function with the right signature into a list volumes handler
type ListVolumesHandlerFunc func(ListVolumesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListVolumesHandlerFunc) Handle(params ListVolumesParams) middleware.Responder {
	return fn(params)
}

// ListVolumesHandler interface for that can handle valid list volumes params
type ListVolumesHandler interface {
	Handle(ListVolumesParams) middleware.Responder
}

// NewListVolumes creates a new http.Handler for the list volumes operation
func NewListVolumes(ctx *middleware.Context, handler ListVolumesHandler) *ListVolumes {
	return &ListVolumes{Context: ctx, Handler: handler}
}

/*ListVolumes swagger:route GET /storage/volumes storage listVolumes

Get a list of available volumes

*/
type ListVolumes struct {
	Context *middleware.Context
	Handler ListVolumesHandler
}

func (o *ListVolumes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewListVolumesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

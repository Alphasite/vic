package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetVolumeHandlerFunc turns a function with the right signature into a get volume handler
type GetVolumeHandlerFunc func(GetVolumeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVolumeHandlerFunc) Handle(params GetVolumeParams) middleware.Responder {
	return fn(params)
}

// GetVolumeHandler interface for that can handle valid get volume params
type GetVolumeHandler interface {
	Handle(GetVolumeParams) middleware.Responder
}

// NewGetVolume creates a new http.Handler for the get volume operation
func NewGetVolume(ctx *middleware.Context, handler GetVolumeHandler) *GetVolume {
	return &GetVolume{Context: ctx, Handler: handler}
}

/*GetVolume swagger:route GET /storage/volumes/{name} storage getVolume

Get info about a volume

*/
type GetVolume struct {
	Context *middleware.Context
	Handler GetVolumeHandler
}

func (o *GetVolume) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetVolumeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

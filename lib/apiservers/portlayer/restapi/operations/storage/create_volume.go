package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateVolumeHandlerFunc turns a function with the right signature into a create volume handler
type CreateVolumeHandlerFunc func(CreateVolumeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateVolumeHandlerFunc) Handle(params CreateVolumeParams) middleware.Responder {
	return fn(params)
}

// CreateVolumeHandler interface for that can handle valid create volume params
type CreateVolumeHandler interface {
	Handle(CreateVolumeParams) middleware.Responder
}

// NewCreateVolume creates a new http.Handler for the create volume operation
func NewCreateVolume(ctx *middleware.Context, handler CreateVolumeHandler) *CreateVolume {
	return &CreateVolume{Context: ctx, Handler: handler}
}

/*CreateVolume swagger:route POST /storage/volumes storage createVolume

Creates a Volume with metadata that is provided from the personality

Create a volume

*/
type CreateVolume struct {
	Context *middleware.Context
	Handler CreateVolumeHandler
}

func (o *CreateVolume) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateVolumeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

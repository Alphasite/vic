package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetImageTarHandlerFunc turns a function with the right signature into a get image tar handler
type GetImageTarHandlerFunc func(GetImageTarParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetImageTarHandlerFunc) Handle(params GetImageTarParams) middleware.Responder {
	return fn(params)
}

// GetImageTarHandler interface for that can handle valid get image tar params
type GetImageTarHandler interface {
	Handle(GetImageTarParams) middleware.Responder
}

// NewGetImageTar creates a new http.Handler for the get image tar operation
func NewGetImageTar(ctx *middleware.Context, handler GetImageTarHandler) *GetImageTar {
	return &GetImageTar{Context: ctx, Handler: handler}
}

/*GetImageTar swagger:route GET /storage/{store_name}/tar/{id} storage getImageTar

Get an image as a tar file

Get an image by id in an image store as a tar file

*/
type GetImageTar struct {
	Context *middleware.Context
	Handler GetImageTarHandler
}

func (o *GetImageTar) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetImageTarParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

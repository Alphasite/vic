package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*CreateImageStoreCreated Created

swagger:response createImageStoreCreated
*/
type CreateImageStoreCreated struct {

	/*
	  In: Body
	*/
	Payload *models.StoreURL `json:"body,omitempty"`
}

// NewCreateImageStoreCreated creates CreateImageStoreCreated with default headers values
func NewCreateImageStoreCreated() *CreateImageStoreCreated {
	return &CreateImageStoreCreated{}
}

// WithPayload adds the payload to the create image store created response
func (o *CreateImageStoreCreated) WithPayload(payload *models.StoreURL) *CreateImageStoreCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create image store created response
func (o *CreateImageStoreCreated) SetPayload(payload *models.StoreURL) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImageStoreCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateImageStoreConflict An image store with that name already exists.

swagger:response createImageStoreConflict
*/
type CreateImageStoreConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateImageStoreConflict creates CreateImageStoreConflict with default headers values
func NewCreateImageStoreConflict() *CreateImageStoreConflict {
	return &CreateImageStoreConflict{}
}

// WithPayload adds the payload to the create image store conflict response
func (o *CreateImageStoreConflict) WithPayload(payload *models.Error) *CreateImageStoreConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create image store conflict response
func (o *CreateImageStoreConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImageStoreConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateImageStoreDefault error

swagger:response createImageStoreDefault
*/
type CreateImageStoreDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateImageStoreDefault creates CreateImageStoreDefault with default headers values
func NewCreateImageStoreDefault(code int) *CreateImageStoreDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateImageStoreDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create image store default response
func (o *CreateImageStoreDefault) WithStatusCode(code int) *CreateImageStoreDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create image store default response
func (o *CreateImageStoreDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create image store default response
func (o *CreateImageStoreDefault) WithPayload(payload *models.Error) *CreateImageStoreDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create image store default response
func (o *CreateImageStoreDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImageStoreDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

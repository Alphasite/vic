package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteImageParams creates a new DeleteImageParams object
// with the default values initialized.
func NewDeleteImageParams() DeleteImageParams {
	var ()
	return DeleteImageParams{}
}

// DeleteImageParams contains all the bound params for the delete image operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteImage
type DeleteImageParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  Required: true
	  In: path
	*/
	ID string
	/*
	  Required: true
	  In: query
	*/
	KeepNodes []string
	/*
	  Required: true
	  In: path
	*/
	StoreName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *DeleteImageParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qKeepNodes, qhkKeepNodes, _ := qs.GetOK("keepNodes")
	if err := o.bindKeepNodes(qKeepNodes, qhkKeepNodes, route.Formats); err != nil {
		res = append(res, err)
	}

	rStoreName, rhkStoreName, _ := route.Params.GetOK("store_name")
	if err := o.bindStoreName(rStoreName, rhkStoreName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteImageParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ID = raw

	return nil
}

func (o *DeleteImageParams) bindKeepNodes(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("keepNodes", "query")
	}

	var qvKeepNodes string
	if len(rawData) > 0 {
		qvKeepNodes = rawData[len(rawData)-1]
	}

	keepNodesIC := swag.SplitByFormat(qvKeepNodes, "")

	if len(keepNodesIC) == 0 {
		return errors.Required("keepNodes", "query")
	}

	var keepNodesIR []string
	for _, keepNodesIV := range keepNodesIC {
		keepNodesI := keepNodesIV

		keepNodesIR = append(keepNodesIR, keepNodesI)
	}

	o.KeepNodes = keepNodesIR

	return nil
}

func (o *DeleteImageParams) bindStoreName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.StoreName = raw

	return nil
}

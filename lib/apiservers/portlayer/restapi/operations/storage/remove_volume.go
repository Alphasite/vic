package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RemoveVolumeHandlerFunc turns a function with the right signature into a remove volume handler
type RemoveVolumeHandlerFunc func(RemoveVolumeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveVolumeHandlerFunc) Handle(params RemoveVolumeParams) middleware.Responder {
	return fn(params)
}

// RemoveVolumeHandler interface for that can handle valid remove volume params
type RemoveVolumeHandler interface {
	Handle(RemoveVolumeParams) middleware.Responder
}

// NewRemoveVolume creates a new http.Handler for the remove volume operation
func NewRemoveVolume(ctx *middleware.Context, handler RemoveVolumeHandler) *RemoveVolume {
	return &RemoveVolume{Context: ctx, Handler: handler}
}

/*RemoveVolume swagger:route DELETE /storage/volumes/{name} storage removeVolume

Remove a volume

*/
type RemoveVolume struct {
	Context *middleware.Context
	Handler RemoveVolumeHandler
}

func (o *RemoveVolume) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewRemoveVolumeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateImageStoreHandlerFunc turns a function with the right signature into a create image store handler
type CreateImageStoreHandlerFunc func(CreateImageStoreParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateImageStoreHandlerFunc) Handle(params CreateImageStoreParams) middleware.Responder {
	return fn(params)
}

// CreateImageStoreHandler interface for that can handle valid create image store params
type CreateImageStoreHandler interface {
	Handle(CreateImageStoreParams) middleware.Responder
}

// NewCreateImageStore creates a new http.Handler for the create image store operation
func NewCreateImageStore(ctx *middleware.Context, handler CreateImageStoreHandler) *CreateImageStore {
	return &CreateImageStore{Context: ctx, Handler: handler}
}

/*CreateImageStore swagger:route POST /storage storage createImageStore

creates an image store

Creates a location to store images

*/
type CreateImageStore struct {
	Context *middleware.Context
	Handler CreateImageStoreHandler
}

func (o *CreateImageStore) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateImageStoreParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

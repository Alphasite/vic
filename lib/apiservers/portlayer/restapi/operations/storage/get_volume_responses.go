package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*GetVolumeOK OK

swagger:response getVolumeOK
*/
type GetVolumeOK struct {

	/*
	  In: Body
	*/
	Payload *models.VolumeResponse `json:"body,omitempty"`
}

// NewGetVolumeOK creates GetVolumeOK with default headers values
func NewGetVolumeOK() *GetVolumeOK {
	return &GetVolumeOK{}
}

// WithPayload adds the payload to the get volume o k response
func (o *GetVolumeOK) WithPayload(payload *models.VolumeResponse) *GetVolumeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get volume o k response
func (o *GetVolumeOK) SetPayload(payload *models.VolumeResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVolumeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetVolumeNotFound Volume not found

swagger:response getVolumeNotFound
*/
type GetVolumeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetVolumeNotFound creates GetVolumeNotFound with default headers values
func NewGetVolumeNotFound() *GetVolumeNotFound {
	return &GetVolumeNotFound{}
}

// WithPayload adds the payload to the get volume not found response
func (o *GetVolumeNotFound) WithPayload(payload *models.Error) *GetVolumeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get volume not found response
func (o *GetVolumeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVolumeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

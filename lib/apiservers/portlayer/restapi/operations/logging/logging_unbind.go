package logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LoggingUnbindHandlerFunc turns a function with the right signature into a logging unbind handler
type LoggingUnbindHandlerFunc func(LoggingUnbindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LoggingUnbindHandlerFunc) Handle(params LoggingUnbindParams) middleware.Responder {
	return fn(params)
}

// LoggingUnbindHandler interface for that can handle valid logging unbind params
type LoggingUnbindHandler interface {
	Handle(LoggingUnbindParams) middleware.Responder
}

// NewLoggingUnbind creates a new http.Handler for the logging unbind operation
func NewLoggingUnbind(ctx *middleware.Context, handler LoggingUnbindHandler) *LoggingUnbind {
	return &LoggingUnbind{Context: ctx, Handler: handler}
}

/*LoggingUnbind swagger:route DELETE /logging/binding logging loggingUnbind

Disable/unbind/deactivate the VirtualDevice

Disable/unbind/deactivate the VirtualDevice

*/
type LoggingUnbind struct {
	Context *middleware.Context
	Handler LoggingUnbindHandler
}

func (o *LoggingUnbind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLoggingUnbindParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

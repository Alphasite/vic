package logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*LoggingBindOK OK

swagger:response loggingBindOK
*/
type LoggingBindOK struct {

	/*
	  In: Body
	*/
	Payload *models.LoggingBindResponse `json:"body,omitempty"`
}

// NewLoggingBindOK creates LoggingBindOK with default headers values
func NewLoggingBindOK() *LoggingBindOK {
	return &LoggingBindOK{}
}

// WithPayload adds the payload to the logging bind o k response
func (o *LoggingBindOK) WithPayload(payload *models.LoggingBindResponse) *LoggingBindOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the logging bind o k response
func (o *LoggingBindOK) SetPayload(payload *models.LoggingBindResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoggingBindOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*LoggingBindNotFound VirtualDevice not found

swagger:response loggingBindNotFound
*/
type LoggingBindNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoggingBindNotFound creates LoggingBindNotFound with default headers values
func NewLoggingBindNotFound() *LoggingBindNotFound {
	return &LoggingBindNotFound{}
}

// WithPayload adds the payload to the logging bind not found response
func (o *LoggingBindNotFound) WithPayload(payload *models.Error) *LoggingBindNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the logging bind not found response
func (o *LoggingBindNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoggingBindNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*LoggingBindInternalServerError Connecting VirtualDevice failed

swagger:response loggingBindInternalServerError
*/
type LoggingBindInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoggingBindInternalServerError creates LoggingBindInternalServerError with default headers values
func NewLoggingBindInternalServerError() *LoggingBindInternalServerError {
	return &LoggingBindInternalServerError{}
}

// WithPayload adds the payload to the logging bind internal server error response
func (o *LoggingBindInternalServerError) WithPayload(payload *models.Error) *LoggingBindInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the logging bind internal server error response
func (o *LoggingBindInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoggingBindInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

package logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LoggingJoinHandlerFunc turns a function with the right signature into a logging join handler
type LoggingJoinHandlerFunc func(LoggingJoinParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LoggingJoinHandlerFunc) Handle(params LoggingJoinParams) middleware.Responder {
	return fn(params)
}

// LoggingJoinHandler interface for that can handle valid logging join params
type LoggingJoinHandler interface {
	Handle(LoggingJoinParams) middleware.Responder
}

// NewLoggingJoin creates a new http.Handler for the logging join operation
func NewLoggingJoin(ctx *middleware.Context, handler LoggingJoinHandler) *LoggingJoin {
	return &LoggingJoin{Context: ctx, Handler: handler}
}

/*LoggingJoin swagger:route POST /logging logging loggingJoin

Add logging capability

Adds logging capabilities to given handle

*/
type LoggingJoin struct {
	Context *middleware.Context
	Handler LoggingJoinHandler
}

func (o *LoggingJoin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLoggingJoinParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

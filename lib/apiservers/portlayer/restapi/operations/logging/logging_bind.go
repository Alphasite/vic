package logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LoggingBindHandlerFunc turns a function with the right signature into a logging bind handler
type LoggingBindHandlerFunc func(LoggingBindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LoggingBindHandlerFunc) Handle(params LoggingBindParams) middleware.Responder {
	return fn(params)
}

// LoggingBindHandler interface for that can handle valid logging bind params
type LoggingBindHandler interface {
	Handle(LoggingBindParams) middleware.Responder
}

// NewLoggingBind creates a new http.Handler for the logging bind operation
func NewLoggingBind(ctx *middleware.Context, handler LoggingBindHandler) *LoggingBind {
	return &LoggingBind{Context: ctx, Handler: handler}
}

/*LoggingBind swagger:route POST /logging/binding logging loggingBind

Enable/bind/activate the VirtualDevice

Enable/bind/activate the VirtualDevice

*/
type LoggingBind struct {
	Context *middleware.Context
	Handler LoggingBindHandler
}

func (o *LoggingBind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLoggingBindParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ContainerWaitHandlerFunc turns a function with the right signature into a container wait handler
type ContainerWaitHandlerFunc func(ContainerWaitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerWaitHandlerFunc) Handle(params ContainerWaitParams) middleware.Responder {
	return fn(params)
}

// ContainerWaitHandler interface for that can handle valid container wait params
type ContainerWaitHandler interface {
	Handle(ContainerWaitParams) middleware.Responder
}

// NewContainerWait creates a new http.Handler for the container wait operation
func NewContainerWait(ctx *middleware.Context, handler ContainerWaitHandler) *ContainerWait {
	return &ContainerWait{Context: ctx, Handler: handler}
}

/*ContainerWait swagger:route GET /containers/{id}/wait containers containerWait

Wait for the container to stop

*/
type ContainerWait struct {
	Context *middleware.Context
	Handler ContainerWaitHandler
}

func (o *ContainerWait) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewContainerWaitParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

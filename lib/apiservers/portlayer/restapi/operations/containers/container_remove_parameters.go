package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContainerRemoveParams creates a new ContainerRemoveParams object
// with the default values initialized.
func NewContainerRemoveParams() ContainerRemoveParams {
	var (
		forceDefault = bool(false)
		vDefault     = bool(false)
	)
	return ContainerRemoveParams{
		Force: &forceDefault,

		V: &vDefault,
	}
}

// ContainerRemoveParams contains all the bound params for the container remove operation
// typically these are obtained from a http.Request
//
// swagger:parameters ContainerRemove
type ContainerRemoveParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: query
	  Default: false
	*/
	Force *bool
	/*
	  Required: true
	  In: path
	*/
	ID string
	/*
	  In: query
	  Default: false
	*/
	V *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ContainerRemoveParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qForce, qhkForce, _ := qs.GetOK("force")
	if err := o.bindForce(qForce, qhkForce, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qV, qhkV, _ := qs.GetOK("v")
	if err := o.bindV(qV, qhkV, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContainerRemoveParams) bindForce(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var forceDefault bool = bool(false)
		o.Force = &forceDefault
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("force", "query", "bool", raw)
	}
	o.Force = &value

	return nil
}

func (o *ContainerRemoveParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ID = raw

	return nil
}

func (o *ContainerRemoveParams) bindV(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var vDefault bool = bool(false)
		o.V = &vDefault
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("v", "query", "bool", raw)
	}
	o.V = &value

	return nil
}

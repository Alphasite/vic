package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*CommitOK OK

swagger:response commitOK
*/
type CommitOK struct {
}

// NewCommitOK creates CommitOK with default headers values
func NewCommitOK() *CommitOK {
	return &CommitOK{}
}

// WriteResponse to the client
func (o *CommitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*CommitNotFound not found

swagger:response commitNotFound
*/
type CommitNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCommitNotFound creates CommitNotFound with default headers values
func NewCommitNotFound() *CommitNotFound {
	return &CommitNotFound{}
}

// WithPayload adds the payload to the commit not found response
func (o *CommitNotFound) WithPayload(payload *models.Error) *CommitNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit not found response
func (o *CommitNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CommitConflict conflict

swagger:response commitConflict
*/
type CommitConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCommitConflict creates CommitConflict with default headers values
func NewCommitConflict() *CommitConflict {
	return &CommitConflict{}
}

// WithPayload adds the payload to the commit conflict response
func (o *CommitConflict) WithPayload(payload *models.Error) *CommitConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit conflict response
func (o *CommitConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CommitDefault Error

swagger:response commitDefault
*/
type CommitDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCommitDefault creates CommitDefault with default headers values
func NewCommitDefault(code int) *CommitDefault {
	if code <= 0 {
		code = 500
	}

	return &CommitDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the commit default response
func (o *CommitDefault) WithStatusCode(code int) *CommitDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the commit default response
func (o *CommitDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the commit default response
func (o *CommitDefault) WithPayload(payload *models.Error) *CommitDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit default response
func (o *CommitDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

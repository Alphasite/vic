package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContainerLogsParams creates a new GetContainerLogsParams object
// with the default values initialized.
func NewGetContainerLogsParams() GetContainerLogsParams {
	var (
		followDefault    = bool(false)
		timestampDefault = bool(false)
	)
	return GetContainerLogsParams{
		Follow: &followDefault,

		Timestamp: &timestampDefault,
	}
}

// GetContainerLogsParams contains all the bound params for the get container logs operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetContainerLogs
type GetContainerLogsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: query
	*/
	Deadline *int64
	/*
	  In: query
	  Default: false
	*/
	Follow *bool
	/*
	  Required: true
	  In: path
	*/
	ID string
	/*
	  In: query
	*/
	Since *int64
	/*
	  In: query
	*/
	Taillines *int64
	/*
	  In: query
	  Default: false
	*/
	Timestamp *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetContainerLogsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDeadline, qhkDeadline, _ := qs.GetOK("deadline")
	if err := o.bindDeadline(qDeadline, qhkDeadline, route.Formats); err != nil {
		res = append(res, err)
	}

	qFollow, qhkFollow, _ := qs.GetOK("follow")
	if err := o.bindFollow(qFollow, qhkFollow, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSince, qhkSince, _ := qs.GetOK("since")
	if err := o.bindSince(qSince, qhkSince, route.Formats); err != nil {
		res = append(res, err)
	}

	qTaillines, qhkTaillines, _ := qs.GetOK("taillines")
	if err := o.bindTaillines(qTaillines, qhkTaillines, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimestamp, qhkTimestamp, _ := qs.GetOK("timestamp")
	if err := o.bindTimestamp(qTimestamp, qhkTimestamp, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetContainerLogsParams) bindDeadline(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("deadline", "query", "int64", raw)
	}
	o.Deadline = &value

	return nil
}

func (o *GetContainerLogsParams) bindFollow(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var followDefault bool = bool(false)
		o.Follow = &followDefault
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("follow", "query", "bool", raw)
	}
	o.Follow = &value

	return nil
}

func (o *GetContainerLogsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ID = raw

	return nil
}

func (o *GetContainerLogsParams) bindSince(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("since", "query", "int64", raw)
	}
	o.Since = &value

	return nil
}

func (o *GetContainerLogsParams) bindTaillines(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("taillines", "query", "int64", raw)
	}
	o.Taillines = &value

	return nil
}

func (o *GetContainerLogsParams) bindTimestamp(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var timestampDefault bool = bool(false)
		o.Timestamp = &timestampDefault
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("timestamp", "query", "bool", raw)
	}
	o.Timestamp = &value

	return nil
}

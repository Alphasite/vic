package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*ContainerRemoveOK OK

swagger:response containerRemoveOK
*/
type ContainerRemoveOK struct {
}

// NewContainerRemoveOK creates ContainerRemoveOK with default headers values
func NewContainerRemoveOK() *ContainerRemoveOK {
	return &ContainerRemoveOK{}
}

// WriteResponse to the client
func (o *ContainerRemoveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*ContainerRemoveBadRequest bad parameter

swagger:response containerRemoveBadRequest
*/
type ContainerRemoveBadRequest struct {
}

// NewContainerRemoveBadRequest creates ContainerRemoveBadRequest with default headers values
func NewContainerRemoveBadRequest() *ContainerRemoveBadRequest {
	return &ContainerRemoveBadRequest{}
}

// WriteResponse to the client
func (o *ContainerRemoveBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
}

/*ContainerRemoveNotFound no such container

swagger:response containerRemoveNotFound
*/
type ContainerRemoveNotFound struct {
}

// NewContainerRemoveNotFound creates ContainerRemoveNotFound with default headers values
func NewContainerRemoveNotFound() *ContainerRemoveNotFound {
	return &ContainerRemoveNotFound{}
}

// WriteResponse to the client
func (o *ContainerRemoveNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

/*ContainerRemoveConflict conflict

swagger:response containerRemoveConflict
*/
type ContainerRemoveConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerRemoveConflict creates ContainerRemoveConflict with default headers values
func NewContainerRemoveConflict() *ContainerRemoveConflict {
	return &ContainerRemoveConflict{}
}

// WithPayload adds the payload to the container remove conflict response
func (o *ContainerRemoveConflict) WithPayload(payload *models.Error) *ContainerRemoveConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container remove conflict response
func (o *ContainerRemoveConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerRemoveConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ContainerRemoveInternalServerError server error

swagger:response containerRemoveInternalServerError
*/
type ContainerRemoveInternalServerError struct {
}

// NewContainerRemoveInternalServerError creates ContainerRemoveInternalServerError with default headers values
func NewContainerRemoveInternalServerError() *ContainerRemoveInternalServerError {
	return &ContainerRemoveInternalServerError{}
}

// WriteResponse to the client
func (o *ContainerRemoveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
}

/*ContainerRemoveDefault Error

swagger:response containerRemoveDefault
*/
type ContainerRemoveDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerRemoveDefault creates ContainerRemoveDefault with default headers values
func NewContainerRemoveDefault(code int) *ContainerRemoveDefault {
	if code <= 0 {
		code = 500
	}

	return &ContainerRemoveDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the container remove default response
func (o *ContainerRemoveDefault) WithStatusCode(code int) *ContainerRemoveDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the container remove default response
func (o *ContainerRemoveDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the container remove default response
func (o *ContainerRemoveDefault) WithPayload(payload *models.Error) *ContainerRemoveDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container remove default response
func (o *ContainerRemoveDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerRemoveDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

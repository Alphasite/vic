package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*ContainerSignalOK OK

swagger:response containerSignalOK
*/
type ContainerSignalOK struct {
}

// NewContainerSignalOK creates ContainerSignalOK with default headers values
func NewContainerSignalOK() *ContainerSignalOK {
	return &ContainerSignalOK{}
}

// WriteResponse to the client
func (o *ContainerSignalOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*ContainerSignalNotFound Container not found

swagger:response containerSignalNotFound
*/
type ContainerSignalNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerSignalNotFound creates ContainerSignalNotFound with default headers values
func NewContainerSignalNotFound() *ContainerSignalNotFound {
	return &ContainerSignalNotFound{}
}

// WithPayload adds the payload to the container signal not found response
func (o *ContainerSignalNotFound) WithPayload(payload *models.Error) *ContainerSignalNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container signal not found response
func (o *ContainerSignalNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerSignalNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ContainerSignalInternalServerError Failed to signal container

swagger:response containerSignalInternalServerError
*/
type ContainerSignalInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerSignalInternalServerError creates ContainerSignalInternalServerError with default headers values
func NewContainerSignalInternalServerError() *ContainerSignalInternalServerError {
	return &ContainerSignalInternalServerError{}
}

// WithPayload adds the payload to the container signal internal server error response
func (o *ContainerSignalInternalServerError) WithPayload(payload *models.Error) *ContainerSignalInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container signal internal server error response
func (o *ContainerSignalInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerSignalInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

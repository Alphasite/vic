package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCommitParams creates a new CommitParams object
// with the default values initialized.
func NewCommitParams() CommitParams {
	var ()
	return CommitParams{}
}

// CommitParams contains all the bound params for the commit operation
// typically these are obtained from a http.Request
//
// swagger:parameters Commit
type CommitParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  Required: true
	  In: path
	*/
	Handle string
	/*
	  In: query
	*/
	WaitTime *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CommitParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rHandle, rhkHandle, _ := route.Params.GetOK("handle")
	if err := o.bindHandle(rHandle, rhkHandle, route.Formats); err != nil {
		res = append(res, err)
	}

	qWaitTime, qhkWaitTime, _ := qs.GetOK("wait_time")
	if err := o.bindWaitTime(qWaitTime, qhkWaitTime, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommitParams) bindHandle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Handle = raw

	return nil
}

func (o *CommitParams) bindWaitTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("wait_time", "query", "int32", raw)
	}
	o.WaitTime = &value

	return nil
}

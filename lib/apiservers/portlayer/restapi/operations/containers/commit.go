package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CommitHandlerFunc turns a function with the right signature into a commit handler
type CommitHandlerFunc func(CommitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CommitHandlerFunc) Handle(params CommitParams) middleware.Responder {
	return fn(params)
}

// CommitHandler interface for that can handle valid commit params
type CommitHandler interface {
	Handle(CommitParams) middleware.Responder
}

// NewCommit creates a new http.Handler for the commit operation
func NewCommit(ctx *middleware.Context, handler CommitHandler) *Commit {
	return &Commit{Context: ctx, Handler: handler}
}

/*Commit swagger:route PUT /containers/{handle} containers commit

Commit and close a container handle

*/
type Commit struct {
	Context *middleware.Context
	Handler CommitHandler
}

func (o *Commit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCommitParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ContainerSignalHandlerFunc turns a function with the right signature into a container signal handler
type ContainerSignalHandlerFunc func(ContainerSignalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerSignalHandlerFunc) Handle(params ContainerSignalParams) middleware.Responder {
	return fn(params)
}

// ContainerSignalHandler interface for that can handle valid container signal params
type ContainerSignalHandler interface {
	Handle(ContainerSignalParams) middleware.Responder
}

// NewContainerSignal creates a new http.Handler for the container signal operation
func NewContainerSignal(ctx *middleware.Context, handler ContainerSignalHandler) *ContainerSignal {
	return &ContainerSignal{Context: ctx, Handler: handler}
}

/*ContainerSignal swagger:route POST /containers/{id}/signal containers containerSignal

Signal a running container

Sends a signal to a container by id

*/
type ContainerSignal struct {
	Context *middleware.Context
	Handler ContainerSignalHandler
}

func (o *ContainerSignal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewContainerSignalParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

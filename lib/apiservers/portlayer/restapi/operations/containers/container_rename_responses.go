package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*ContainerRenameOK OK

swagger:response containerRenameOK
*/
type ContainerRenameOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewContainerRenameOK creates ContainerRenameOK with default headers values
func NewContainerRenameOK() *ContainerRenameOK {
	return &ContainerRenameOK{}
}

// WithPayload adds the payload to the container rename o k response
func (o *ContainerRenameOK) WithPayload(payload string) *ContainerRenameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container rename o k response
func (o *ContainerRenameOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerRenameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ContainerRenameNotFound no such container

swagger:response containerRenameNotFound
*/
type ContainerRenameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerRenameNotFound creates ContainerRenameNotFound with default headers values
func NewContainerRenameNotFound() *ContainerRenameNotFound {
	return &ContainerRenameNotFound{}
}

// WithPayload adds the payload to the container rename not found response
func (o *ContainerRenameNotFound) WithPayload(payload *models.Error) *ContainerRenameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container rename not found response
func (o *ContainerRenameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerRenameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ContainerRenameConflict conflict, name already assigned

swagger:response containerRenameConflict
*/
type ContainerRenameConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerRenameConflict creates ContainerRenameConflict with default headers values
func NewContainerRenameConflict() *ContainerRenameConflict {
	return &ContainerRenameConflict{}
}

// WithPayload adds the payload to the container rename conflict response
func (o *ContainerRenameConflict) WithPayload(payload *models.Error) *ContainerRenameConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container rename conflict response
func (o *ContainerRenameConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerRenameConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ContainerRenameInternalServerError server error

swagger:response containerRenameInternalServerError
*/
type ContainerRenameInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerRenameInternalServerError creates ContainerRenameInternalServerError with default headers values
func NewContainerRenameInternalServerError() *ContainerRenameInternalServerError {
	return &ContainerRenameInternalServerError{}
}

// WithPayload adds the payload to the container rename internal server error response
func (o *ContainerRenameInternalServerError) WithPayload(payload *models.Error) *ContainerRenameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container rename internal server error response
func (o *ContainerRenameInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerRenameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

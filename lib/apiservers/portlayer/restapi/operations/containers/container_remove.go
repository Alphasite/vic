package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ContainerRemoveHandlerFunc turns a function with the right signature into a container remove handler
type ContainerRemoveHandlerFunc func(ContainerRemoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerRemoveHandlerFunc) Handle(params ContainerRemoveParams) middleware.Responder {
	return fn(params)
}

// ContainerRemoveHandler interface for that can handle valid container remove params
type ContainerRemoveHandler interface {
	Handle(ContainerRemoveParams) middleware.Responder
}

// NewContainerRemove creates a new http.Handler for the container remove operation
func NewContainerRemove(ctx *middleware.Context, handler ContainerRemoveHandler) *ContainerRemove {
	return &ContainerRemove{Context: ctx, Handler: handler}
}

/*ContainerRemove swagger:route DELETE /containers/{id} containers containerRemove

Remove a container from existence

*/
type ContainerRemove struct {
	Context *middleware.Context
	Handler ContainerRemoveHandler
}

func (o *ContainerRemove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewContainerRemoveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

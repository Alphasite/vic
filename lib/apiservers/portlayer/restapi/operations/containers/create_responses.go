package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*CreateOK OK

swagger:response createOK
*/
type CreateOK struct {

	/*
	  In: Body
	*/
	Payload *models.ContainerCreatedInfo `json:"body,omitempty"`
}

// NewCreateOK creates CreateOK with default headers values
func NewCreateOK() *CreateOK {
	return &CreateOK{}
}

// WithPayload adds the payload to the create o k response
func (o *CreateOK) WithPayload(payload *models.ContainerCreatedInfo) *CreateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create o k response
func (o *CreateOK) SetPayload(payload *models.ContainerCreatedInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateNotFound Create failed

swagger:response createNotFound
*/
type CreateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateNotFound creates CreateNotFound with default headers values
func NewCreateNotFound() *CreateNotFound {
	return &CreateNotFound{}
}

// WithPayload adds the payload to the create not found response
func (o *CreateNotFound) WithPayload(payload *models.Error) *CreateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create not found response
func (o *CreateNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*ContainerWaitOK OK

swagger:response containerWaitOK
*/
type ContainerWaitOK struct {

	/*
	  In: Body
	*/
	Payload *models.ContainerInfo `json:"body,omitempty"`
}

// NewContainerWaitOK creates ContainerWaitOK with default headers values
func NewContainerWaitOK() *ContainerWaitOK {
	return &ContainerWaitOK{}
}

// WithPayload adds the payload to the container wait o k response
func (o *ContainerWaitOK) WithPayload(payload *models.ContainerInfo) *ContainerWaitOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container wait o k response
func (o *ContainerWaitOK) SetPayload(payload *models.ContainerInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerWaitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ContainerWaitNotFound Container not found

swagger:response containerWaitNotFound
*/
type ContainerWaitNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerWaitNotFound creates ContainerWaitNotFound with default headers values
func NewContainerWaitNotFound() *ContainerWaitNotFound {
	return &ContainerWaitNotFound{}
}

// WithPayload adds the payload to the container wait not found response
func (o *ContainerWaitNotFound) WithPayload(payload *models.Error) *ContainerWaitNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container wait not found response
func (o *ContainerWaitNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerWaitNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ContainerWaitInternalServerError Failed to wait on Container

swagger:response containerWaitInternalServerError
*/
type ContainerWaitInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewContainerWaitInternalServerError creates ContainerWaitInternalServerError with default headers values
func NewContainerWaitInternalServerError() *ContainerWaitInternalServerError {
	return &ContainerWaitInternalServerError{}
}

// WithPayload adds the payload to the container wait internal server error response
func (o *ContainerWaitInternalServerError) WithPayload(payload *models.Error) *ContainerWaitInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container wait internal server error response
func (o *ContainerWaitInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerWaitInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

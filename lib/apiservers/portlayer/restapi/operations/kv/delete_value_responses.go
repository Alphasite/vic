package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*DeleteValueOK OK

swagger:response deleteValueOK
*/
type DeleteValueOK struct {
}

// NewDeleteValueOK creates DeleteValueOK with default headers values
func NewDeleteValueOK() *DeleteValueOK {
	return &DeleteValueOK{}
}

// WriteResponse to the client
func (o *DeleteValueOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*DeleteValueNotFound Not found

swagger:response deleteValueNotFound
*/
type DeleteValueNotFound struct {
}

// NewDeleteValueNotFound creates DeleteValueNotFound with default headers values
func NewDeleteValueNotFound() *DeleteValueNotFound {
	return &DeleteValueNotFound{}
}

// WriteResponse to the client
func (o *DeleteValueNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

/*DeleteValueInternalServerError error

swagger:response deleteValueInternalServerError
*/
type DeleteValueInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteValueInternalServerError creates DeleteValueInternalServerError with default headers values
func NewDeleteValueInternalServerError() *DeleteValueInternalServerError {
	return &DeleteValueInternalServerError{}
}

// WithPayload adds the payload to the delete value internal server error response
func (o *DeleteValueInternalServerError) WithPayload(payload *models.Error) *DeleteValueInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete value internal server error response
func (o *DeleteValueInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteValueInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetValueHandlerFunc turns a function with the right signature into a get value handler
type GetValueHandlerFunc func(GetValueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetValueHandlerFunc) Handle(params GetValueParams) middleware.Responder {
	return fn(params)
}

// GetValueHandler interface for that can handle valid get value params
type GetValueHandler interface {
	Handle(GetValueParams) middleware.Responder
}

// NewGetValue creates a new http.Handler for the get value operation
func NewGetValue(ctx *middleware.Context, handler GetValueHandler) *GetValue {
	return &GetValue{Context: ctx, Handler: handler}
}

/*GetValue swagger:route GET /kv/{key} kv getValue

Gets value from k/v store

*/
type GetValue struct {
	Context *middleware.Context
	Handler GetValueHandler
}

func (o *GetValue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetValueParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

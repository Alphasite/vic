package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*RemoveContainerOK OK

swagger:response removeContainerOK
*/
type RemoveContainerOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewRemoveContainerOK creates RemoveContainerOK with default headers values
func NewRemoveContainerOK() *RemoveContainerOK {
	return &RemoveContainerOK{}
}

// WithPayload adds the payload to the remove container o k response
func (o *RemoveContainerOK) WithPayload(payload string) *RemoveContainerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove container o k response
func (o *RemoveContainerOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveContainerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*RemoveContainerNotFound Not found

swagger:response removeContainerNotFound
*/
type RemoveContainerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveContainerNotFound creates RemoveContainerNotFound with default headers values
func NewRemoveContainerNotFound() *RemoveContainerNotFound {
	return &RemoveContainerNotFound{}
}

// WithPayload adds the payload to the remove container not found response
func (o *RemoveContainerNotFound) WithPayload(payload *models.Error) *RemoveContainerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove container not found response
func (o *RemoveContainerNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveContainerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*RemoveContainerInternalServerError error

swagger:response removeContainerInternalServerError
*/
type RemoveContainerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveContainerInternalServerError creates RemoveContainerInternalServerError with default headers values
func NewRemoveContainerInternalServerError() *RemoveContainerInternalServerError {
	return &RemoveContainerInternalServerError{}
}

// WithPayload adds the payload to the remove container internal server error response
func (o *RemoveContainerInternalServerError) WithPayload(payload *models.Error) *RemoveContainerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove container internal server error response
func (o *RemoveContainerInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveContainerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BindContainerHandlerFunc turns a function with the right signature into a bind container handler
type BindContainerHandlerFunc func(BindContainerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BindContainerHandlerFunc) Handle(params BindContainerParams) middleware.Responder {
	return fn(params)
}

// BindContainerHandler interface for that can handle valid bind container params
type BindContainerHandler interface {
	Handle(BindContainerParams) middleware.Responder
}

// NewBindContainer creates a new http.Handler for the bind container operation
func NewBindContainer(ctx *middleware.Context, handler BindContainerHandler) *BindContainer {
	return &BindContainer{Context: ctx, Handler: handler}
}

/*BindContainer swagger:route POST /scopes/containers/{handle}/binding scopes bindContainer

Perform scope initialization for each of the scopes the container belongs to. Network initialization may include, for example, assigning addresses on a scope.

*/
type BindContainer struct {
	Context *middleware.Context
	Handler BindContainerHandler
}

func (o *BindContainer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewBindContainerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

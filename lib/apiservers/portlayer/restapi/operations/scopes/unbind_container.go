package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UnbindContainerHandlerFunc turns a function with the right signature into a unbind container handler
type UnbindContainerHandlerFunc func(UnbindContainerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UnbindContainerHandlerFunc) Handle(params UnbindContainerParams) middleware.Responder {
	return fn(params)
}

// UnbindContainerHandler interface for that can handle valid unbind container params
type UnbindContainerHandler interface {
	Handle(UnbindContainerParams) middleware.Responder
}

// NewUnbindContainer creates a new http.Handler for the unbind container operation
func NewUnbindContainer(ctx *middleware.Context, handler UnbindContainerHandler) *UnbindContainer {
	return &UnbindContainer{Context: ctx, Handler: handler}
}

/*UnbindContainer swagger:route DELETE /scopes/containers/{handle}/binding scopes unbindContainer

UnbindContainer unbind container API

*/
type UnbindContainer struct {
	Context *middleware.Context
	Handler UnbindContainerHandler
}

func (o *UnbindContainer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUnbindContainerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

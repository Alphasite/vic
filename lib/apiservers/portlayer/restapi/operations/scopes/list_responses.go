package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*ListOK OK

swagger:response listOK
*/
type ListOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ScopeConfig `json:"body,omitempty"`
}

// NewListOK creates ListOK with default headers values
func NewListOK() *ListOK {
	return &ListOK{}
}

// WithPayload adds the payload to the list o k response
func (o *ListOK) WithPayload(payload []*models.ScopeConfig) *ListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list o k response
func (o *ListOK) SetPayload(payload []*models.ScopeConfig) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.ScopeConfig, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ListNotFound Not found

swagger:response listNotFound
*/
type ListNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListNotFound creates ListNotFound with default headers values
func NewListNotFound() *ListNotFound {
	return &ListNotFound{}
}

// WithPayload adds the payload to the list not found response
func (o *ListNotFound) WithPayload(payload *models.Error) *ListNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list not found response
func (o *ListNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ListDefault error

swagger:response listDefault
*/
type ListDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDefault creates ListDefault with default headers values
func NewListDefault(code int) *ListDefault {
	if code <= 0 {
		code = 500
	}

	return &ListDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the list default response
func (o *ListDefault) WithStatusCode(code int) *ListDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the list default response
func (o *ListDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the list default response
func (o *ListDefault) WithPayload(payload *models.Error) *ListDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list default response
func (o *ListDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

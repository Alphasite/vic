package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*AddContainerOK OK

swagger:response addContainerOK
*/
type AddContainerOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewAddContainerOK creates AddContainerOK with default headers values
func NewAddContainerOK() *AddContainerOK {
	return &AddContainerOK{}
}

// WithPayload adds the payload to the add container o k response
func (o *AddContainerOK) WithPayload(payload string) *AddContainerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add container o k response
func (o *AddContainerOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddContainerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*AddContainerNotFound Not found

swagger:response addContainerNotFound
*/
type AddContainerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddContainerNotFound creates AddContainerNotFound with default headers values
func NewAddContainerNotFound() *AddContainerNotFound {
	return &AddContainerNotFound{}
}

// WithPayload adds the payload to the add container not found response
func (o *AddContainerNotFound) WithPayload(payload *models.Error) *AddContainerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add container not found response
func (o *AddContainerNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddContainerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddContainerInternalServerError error

swagger:response addContainerInternalServerError
*/
type AddContainerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddContainerInternalServerError creates AddContainerInternalServerError with default headers values
func NewAddContainerInternalServerError() *AddContainerInternalServerError {
	return &AddContainerInternalServerError{}
}

// WithPayload adds the payload to the add container internal server error response
func (o *AddContainerInternalServerError) WithPayload(payload *models.Error) *AddContainerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add container internal server error response
func (o *AddContainerInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddContainerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

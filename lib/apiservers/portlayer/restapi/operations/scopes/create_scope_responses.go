package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*CreateScopeCreated Created

swagger:response createScopeCreated
*/
type CreateScopeCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ScopeConfig `json:"body,omitempty"`
}

// NewCreateScopeCreated creates CreateScopeCreated with default headers values
func NewCreateScopeCreated() *CreateScopeCreated {
	return &CreateScopeCreated{}
}

// WithPayload adds the payload to the create scope created response
func (o *CreateScopeCreated) WithPayload(payload *models.ScopeConfig) *CreateScopeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create scope created response
func (o *CreateScopeCreated) SetPayload(payload *models.ScopeConfig) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateScopeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateScopeConflict A scope with that name exists.

swagger:response createScopeConflict
*/
type CreateScopeConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateScopeConflict creates CreateScopeConflict with default headers values
func NewCreateScopeConflict() *CreateScopeConflict {
	return &CreateScopeConflict{}
}

// WithPayload adds the payload to the create scope conflict response
func (o *CreateScopeConflict) WithPayload(payload *models.Error) *CreateScopeConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create scope conflict response
func (o *CreateScopeConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateScopeConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateScopeDefault error

swagger:response createScopeDefault
*/
type CreateScopeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateScopeDefault creates CreateScopeDefault with default headers values
func NewCreateScopeDefault(code int) *CreateScopeDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateScopeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create scope default response
func (o *CreateScopeDefault) WithStatusCode(code int) *CreateScopeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create scope default response
func (o *CreateScopeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create scope default response
func (o *CreateScopeDefault) WithPayload(payload *models.Error) *CreateScopeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create scope default response
func (o *CreateScopeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateScopeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

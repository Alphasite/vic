package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddContainerHandlerFunc turns a function with the right signature into a add container handler
type AddContainerHandlerFunc func(AddContainerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddContainerHandlerFunc) Handle(params AddContainerParams) middleware.Responder {
	return fn(params)
}

// AddContainerHandler interface for that can handle valid add container params
type AddContainerHandler interface {
	Handle(AddContainerParams) middleware.Responder
}

// NewAddContainer creates a new http.Handler for the add container operation
func NewAddContainer(ctx *middleware.Context, handler AddContainerHandler) *AddContainer {
	return &AddContainer{Context: ctx, Handler: handler}
}

/*AddContainer swagger:route POST /scopes/{scope}/containers scopes addContainer

Add a container to scopes modifying the container VM's config as necessary

*/
type AddContainer struct {
	Context *middleware.Context
	Handler AddContainerHandler
}

func (o *AddContainer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAddContainerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

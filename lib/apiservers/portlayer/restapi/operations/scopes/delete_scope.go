package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteScopeHandlerFunc turns a function with the right signature into a delete scope handler
type DeleteScopeHandlerFunc func(DeleteScopeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteScopeHandlerFunc) Handle(params DeleteScopeParams) middleware.Responder {
	return fn(params)
}

// DeleteScopeHandler interface for that can handle valid delete scope params
type DeleteScopeHandler interface {
	Handle(DeleteScopeParams) middleware.Responder
}

// NewDeleteScope creates a new http.Handler for the delete scope operation
func NewDeleteScope(ctx *middleware.Context, handler DeleteScopeHandler) *DeleteScope {
	return &DeleteScope{Context: ctx, Handler: handler}
}

/*DeleteScope swagger:route DELETE /scopes/{idName} scopes deleteScope

DeleteScope delete scope API

*/
type DeleteScope struct {
	Context *middleware.Context
	Handler DeleteScopeHandler
}

func (o *DeleteScope) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteScopeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RemoveContainerHandlerFunc turns a function with the right signature into a remove container handler
type RemoveContainerHandlerFunc func(RemoveContainerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveContainerHandlerFunc) Handle(params RemoveContainerParams) middleware.Responder {
	return fn(params)
}

// RemoveContainerHandler interface for that can handle valid remove container params
type RemoveContainerHandler interface {
	Handle(RemoveContainerParams) middleware.Responder
}

// NewRemoveContainer creates a new http.Handler for the remove container operation
func NewRemoveContainer(ctx *middleware.Context, handler RemoveContainerHandler) *RemoveContainer {
	return &RemoveContainer{Context: ctx, Handler: handler}
}

/*RemoveContainer swagger:route DELETE /scopes/{scope}/containers/{handle} scopes removeContainer

Remove a container from a scope

*/
type RemoveContainer struct {
	Context *middleware.Context
	Handler RemoveContainerHandler
}

func (o *RemoveContainer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewRemoveContainerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

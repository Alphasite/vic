package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateScopeHandlerFunc turns a function with the right signature into a create scope handler
type CreateScopeHandlerFunc func(CreateScopeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateScopeHandlerFunc) Handle(params CreateScopeParams) middleware.Responder {
	return fn(params)
}

// CreateScopeHandler interface for that can handle valid create scope params
type CreateScopeHandler interface {
	Handle(CreateScopeParams) middleware.Responder
}

// NewCreateScope creates a new http.Handler for the create scope operation
func NewCreateScope(ctx *middleware.Context, handler CreateScopeHandler) *CreateScope {
	return &CreateScope{Context: ctx, Handler: handler}
}

/*CreateScope swagger:route POST /scopes scopes createScope

Create a new scope

*/
type CreateScope struct {
	Context *middleware.Context
	Handler CreateScopeHandler
}

func (o *CreateScope) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateScopeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/containers"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/events"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/interaction"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/kv"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/logging"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/misc"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/scopes"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/storage"
	"github.com/vmware/vic/lib/apiservers/portlayer/restapi/operations/tasks"
)

// NewPortLayerAPI creates a new PortLayer instance
func NewPortLayerAPI(spec *loads.Document) *PortLayerAPI {
	return &PortLayerAPI{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
		ServeError:      errors.ServeError,
		JSONConsumer:    runtime.JSONConsumer(),
		BinConsumer:     runtime.ByteStreamConsumer(),
		JSONProducer:    runtime.JSONProducer(),
		BinProducer:     runtime.ByteStreamProducer(),
		TxtProducer:     runtime.TextProducer(),
		ScopesAddContainerHandler: scopes.AddContainerHandlerFunc(func(params scopes.AddContainerParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesAddContainer has not yet been implemented")
		}),
		TasksBindHandler: tasks.BindHandlerFunc(func(params tasks.BindParams) middleware.Responder {
			return middleware.NotImplemented("operation TasksBind has not yet been implemented")
		}),
		ScopesBindContainerHandler: scopes.BindContainerHandlerFunc(func(params scopes.BindContainerParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesBindContainer has not yet been implemented")
		}),
		ContainersCommitHandler: containers.CommitHandlerFunc(func(params containers.CommitParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersCommit has not yet been implemented")
		}),
		InteractionContainerCloseStdinHandler: interaction.ContainerCloseStdinHandlerFunc(func(params interaction.ContainerCloseStdinParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionContainerCloseStdin has not yet been implemented")
		}),
		InteractionContainerGetStderrHandler: interaction.ContainerGetStderrHandlerFunc(func(params interaction.ContainerGetStderrParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionContainerGetStderr has not yet been implemented")
		}),
		InteractionContainerGetStdoutHandler: interaction.ContainerGetStdoutHandlerFunc(func(params interaction.ContainerGetStdoutParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionContainerGetStdout has not yet been implemented")
		}),
		ContainersContainerRemoveHandler: containers.ContainerRemoveHandlerFunc(func(params containers.ContainerRemoveParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersContainerRemove has not yet been implemented")
		}),
		ContainersContainerRenameHandler: containers.ContainerRenameHandlerFunc(func(params containers.ContainerRenameParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersContainerRename has not yet been implemented")
		}),
		InteractionContainerResizeHandler: interaction.ContainerResizeHandlerFunc(func(params interaction.ContainerResizeParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionContainerResize has not yet been implemented")
		}),
		InteractionContainerSetStdinHandler: interaction.ContainerSetStdinHandlerFunc(func(params interaction.ContainerSetStdinParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionContainerSetStdin has not yet been implemented")
		}),
		ContainersContainerSignalHandler: containers.ContainerSignalHandlerFunc(func(params containers.ContainerSignalParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersContainerSignal has not yet been implemented")
		}),
		ContainersContainerWaitHandler: containers.ContainerWaitHandlerFunc(func(params containers.ContainerWaitParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersContainerWait has not yet been implemented")
		}),
		ContainersCreateHandler: containers.CreateHandlerFunc(func(params containers.CreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersCreate has not yet been implemented")
		}),
		StorageCreateImageStoreHandler: storage.CreateImageStoreHandlerFunc(func(params storage.CreateImageStoreParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageCreateImageStore has not yet been implemented")
		}),
		ScopesCreateScopeHandler: scopes.CreateScopeHandlerFunc(func(params scopes.CreateScopeParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesCreateScope has not yet been implemented")
		}),
		StorageCreateVolumeHandler: storage.CreateVolumeHandlerFunc(func(params storage.CreateVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageCreateVolume has not yet been implemented")
		}),
		StorageDeleteImageHandler: storage.DeleteImageHandlerFunc(func(params storage.DeleteImageParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageDeleteImage has not yet been implemented")
		}),
		ScopesDeleteScopeHandler: scopes.DeleteScopeHandlerFunc(func(params scopes.DeleteScopeParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesDeleteScope has not yet been implemented")
		}),
		KvDeleteValueHandler: kv.DeleteValueHandlerFunc(func(params kv.DeleteValueParams) middleware.Responder {
			return middleware.NotImplemented("operation KvDeleteValue has not yet been implemented")
		}),
		ContainersGetHandler: containers.GetHandlerFunc(func(params containers.GetParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersGet has not yet been implemented")
		}),
		ScopesGetContainerEndpointsHandler: scopes.GetContainerEndpointsHandlerFunc(func(params scopes.GetContainerEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesGetContainerEndpoints has not yet been implemented")
		}),
		ContainersGetContainerInfoHandler: containers.GetContainerInfoHandlerFunc(func(params containers.GetContainerInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersGetContainerInfo has not yet been implemented")
		}),
		ContainersGetContainerListHandler: containers.GetContainerListHandlerFunc(func(params containers.GetContainerListParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersGetContainerList has not yet been implemented")
		}),
		ContainersGetContainerLogsHandler: containers.GetContainerLogsHandlerFunc(func(params containers.GetContainerLogsParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersGetContainerLogs has not yet been implemented")
		}),
		ContainersGetContainerStatsHandler: containers.GetContainerStatsHandlerFunc(func(params containers.GetContainerStatsParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersGetContainerStats has not yet been implemented")
		}),
		EventsGetEventsHandler: events.GetEventsHandlerFunc(func(params events.GetEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation EventsGetEvents has not yet been implemented")
		}),
		StorageGetImageHandler: storage.GetImageHandlerFunc(func(params storage.GetImageParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetImage has not yet been implemented")
		}),
		StorageGetImageTarHandler: storage.GetImageTarHandlerFunc(func(params storage.GetImageTarParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetImageTar has not yet been implemented")
		}),
		ContainersGetStateHandler: containers.GetStateHandlerFunc(func(params containers.GetStateParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersGetState has not yet been implemented")
		}),
		MiscGetVCHInfoHandler: misc.GetVCHInfoHandlerFunc(func(params misc.GetVCHInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation MiscGetVCHInfo has not yet been implemented")
		}),
		KvGetValueHandler: kv.GetValueHandlerFunc(func(params kv.GetValueParams) middleware.Responder {
			return middleware.NotImplemented("operation KvGetValue has not yet been implemented")
		}),
		StorageGetVolumeHandler: storage.GetVolumeHandlerFunc(func(params storage.GetVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetVolume has not yet been implemented")
		}),
		TasksInspectHandler: tasks.InspectHandlerFunc(func(params tasks.InspectParams) middleware.Responder {
			return middleware.NotImplemented("operation TasksInspect has not yet been implemented")
		}),
		InteractionInteractionBindHandler: interaction.InteractionBindHandlerFunc(func(params interaction.InteractionBindParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionInteractionBind has not yet been implemented")
		}),
		InteractionInteractionJoinHandler: interaction.InteractionJoinHandlerFunc(func(params interaction.InteractionJoinParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionInteractionJoin has not yet been implemented")
		}),
		InteractionInteractionUnbindHandler: interaction.InteractionUnbindHandlerFunc(func(params interaction.InteractionUnbindParams) middleware.Responder {
			return middleware.NotImplemented("operation InteractionInteractionUnbind has not yet been implemented")
		}),
		TasksJoinHandler: tasks.JoinHandlerFunc(func(params tasks.JoinParams) middleware.Responder {
			return middleware.NotImplemented("operation TasksJoin has not yet been implemented")
		}),
		ScopesListHandler: scopes.ListHandlerFunc(func(params scopes.ListParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesList has not yet been implemented")
		}),
		ScopesListAllHandler: scopes.ListAllHandlerFunc(func(params scopes.ListAllParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesListAll has not yet been implemented")
		}),
		StorageListImagesHandler: storage.ListImagesHandlerFunc(func(params storage.ListImagesParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageListImages has not yet been implemented")
		}),
		StorageListVolumesHandler: storage.ListVolumesHandlerFunc(func(params storage.ListVolumesParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageListVolumes has not yet been implemented")
		}),
		LoggingLoggingBindHandler: logging.LoggingBindHandlerFunc(func(params logging.LoggingBindParams) middleware.Responder {
			return middleware.NotImplemented("operation LoggingLoggingBind has not yet been implemented")
		}),
		LoggingLoggingJoinHandler: logging.LoggingJoinHandlerFunc(func(params logging.LoggingJoinParams) middleware.Responder {
			return middleware.NotImplemented("operation LoggingLoggingJoin has not yet been implemented")
		}),
		LoggingLoggingUnbindHandler: logging.LoggingUnbindHandlerFunc(func(params logging.LoggingUnbindParams) middleware.Responder {
			return middleware.NotImplemented("operation LoggingLoggingUnbind has not yet been implemented")
		}),
		MiscPingHandler: misc.PingHandlerFunc(func(params misc.PingParams) middleware.Responder {
			return middleware.NotImplemented("operation MiscPing has not yet been implemented")
		}),
		KvPutValueHandler: kv.PutValueHandlerFunc(func(params kv.PutValueParams) middleware.Responder {
			return middleware.NotImplemented("operation KvPutValue has not yet been implemented")
		}),
		TasksRemoveHandler: tasks.RemoveHandlerFunc(func(params tasks.RemoveParams) middleware.Responder {
			return middleware.NotImplemented("operation TasksRemove has not yet been implemented")
		}),
		ScopesRemoveContainerHandler: scopes.RemoveContainerHandlerFunc(func(params scopes.RemoveContainerParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesRemoveContainer has not yet been implemented")
		}),
		StorageRemoveVolumeHandler: storage.RemoveVolumeHandlerFunc(func(params storage.RemoveVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageRemoveVolume has not yet been implemented")
		}),
		ContainersStateChangeHandler: containers.StateChangeHandlerFunc(func(params containers.StateChangeParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainersStateChange has not yet been implemented")
		}),
		TasksUnbindHandler: tasks.UnbindHandlerFunc(func(params tasks.UnbindParams) middleware.Responder {
			return middleware.NotImplemented("operation TasksUnbind has not yet been implemented")
		}),
		ScopesUnbindContainerHandler: scopes.UnbindContainerHandlerFunc(func(params scopes.UnbindContainerParams) middleware.Responder {
			return middleware.NotImplemented("operation ScopesUnbindContainer has not yet been implemented")
		}),
		StorageVolumeJoinHandler: storage.VolumeJoinHandlerFunc(func(params storage.VolumeJoinParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageVolumeJoin has not yet been implemented")
		}),
		StorageVolumeStoresListHandler: storage.VolumeStoresListHandlerFunc(func(params storage.VolumeStoresListParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageVolumeStoresList has not yet been implemented")
		}),
		TasksWaitHandler: tasks.WaitHandlerFunc(func(params tasks.WaitParams) middleware.Responder {
			return middleware.NotImplemented("operation TasksWait has not yet been implemented")
		}),
		StorageWriteImageHandler: storage.WriteImageHandlerFunc(func(params storage.WriteImageParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageWriteImage has not yet been implemented")
		}),
	}
}

/*PortLayerAPI Port Layer API */
type PortLayerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/raw-stream" mime type
	BinConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// ScopesAddContainerHandler sets the operation handler for the add container operation
	ScopesAddContainerHandler scopes.AddContainerHandler
	// TasksBindHandler sets the operation handler for the bind operation
	TasksBindHandler tasks.BindHandler
	// ScopesBindContainerHandler sets the operation handler for the bind container operation
	ScopesBindContainerHandler scopes.BindContainerHandler
	// ContainersCommitHandler sets the operation handler for the commit operation
	ContainersCommitHandler containers.CommitHandler
	// InteractionContainerCloseStdinHandler sets the operation handler for the container close stdin operation
	InteractionContainerCloseStdinHandler interaction.ContainerCloseStdinHandler
	// InteractionContainerGetStderrHandler sets the operation handler for the container get stderr operation
	InteractionContainerGetStderrHandler interaction.ContainerGetStderrHandler
	// InteractionContainerGetStdoutHandler sets the operation handler for the container get stdout operation
	InteractionContainerGetStdoutHandler interaction.ContainerGetStdoutHandler
	// ContainersContainerRemoveHandler sets the operation handler for the container remove operation
	ContainersContainerRemoveHandler containers.ContainerRemoveHandler
	// ContainersContainerRenameHandler sets the operation handler for the container rename operation
	ContainersContainerRenameHandler containers.ContainerRenameHandler
	// InteractionContainerResizeHandler sets the operation handler for the container resize operation
	InteractionContainerResizeHandler interaction.ContainerResizeHandler
	// InteractionContainerSetStdinHandler sets the operation handler for the container set stdin operation
	InteractionContainerSetStdinHandler interaction.ContainerSetStdinHandler
	// ContainersContainerSignalHandler sets the operation handler for the container signal operation
	ContainersContainerSignalHandler containers.ContainerSignalHandler
	// ContainersContainerWaitHandler sets the operation handler for the container wait operation
	ContainersContainerWaitHandler containers.ContainerWaitHandler
	// ContainersCreateHandler sets the operation handler for the create operation
	ContainersCreateHandler containers.CreateHandler
	// StorageCreateImageStoreHandler sets the operation handler for the create image store operation
	StorageCreateImageStoreHandler storage.CreateImageStoreHandler
	// ScopesCreateScopeHandler sets the operation handler for the create scope operation
	ScopesCreateScopeHandler scopes.CreateScopeHandler
	// StorageCreateVolumeHandler sets the operation handler for the create volume operation
	StorageCreateVolumeHandler storage.CreateVolumeHandler
	// StorageDeleteImageHandler sets the operation handler for the delete image operation
	StorageDeleteImageHandler storage.DeleteImageHandler
	// ScopesDeleteScopeHandler sets the operation handler for the delete scope operation
	ScopesDeleteScopeHandler scopes.DeleteScopeHandler
	// KvDeleteValueHandler sets the operation handler for the delete value operation
	KvDeleteValueHandler kv.DeleteValueHandler
	// ContainersGetHandler sets the operation handler for the get operation
	ContainersGetHandler containers.GetHandler
	// ScopesGetContainerEndpointsHandler sets the operation handler for the get container endpoints operation
	ScopesGetContainerEndpointsHandler scopes.GetContainerEndpointsHandler
	// ContainersGetContainerInfoHandler sets the operation handler for the get container info operation
	ContainersGetContainerInfoHandler containers.GetContainerInfoHandler
	// ContainersGetContainerListHandler sets the operation handler for the get container list operation
	ContainersGetContainerListHandler containers.GetContainerListHandler
	// ContainersGetContainerLogsHandler sets the operation handler for the get container logs operation
	ContainersGetContainerLogsHandler containers.GetContainerLogsHandler
	// ContainersGetContainerStatsHandler sets the operation handler for the get container stats operation
	ContainersGetContainerStatsHandler containers.GetContainerStatsHandler
	// EventsGetEventsHandler sets the operation handler for the get events operation
	EventsGetEventsHandler events.GetEventsHandler
	// StorageGetImageHandler sets the operation handler for the get image operation
	StorageGetImageHandler storage.GetImageHandler
	// StorageGetImageTarHandler sets the operation handler for the get image tar operation
	StorageGetImageTarHandler storage.GetImageTarHandler
	// ContainersGetStateHandler sets the operation handler for the get state operation
	ContainersGetStateHandler containers.GetStateHandler
	// MiscGetVCHInfoHandler sets the operation handler for the get v c h info operation
	MiscGetVCHInfoHandler misc.GetVCHInfoHandler
	// KvGetValueHandler sets the operation handler for the get value operation
	KvGetValueHandler kv.GetValueHandler
	// StorageGetVolumeHandler sets the operation handler for the get volume operation
	StorageGetVolumeHandler storage.GetVolumeHandler
	// TasksInspectHandler sets the operation handler for the inspect operation
	TasksInspectHandler tasks.InspectHandler
	// InteractionInteractionBindHandler sets the operation handler for the interaction bind operation
	InteractionInteractionBindHandler interaction.InteractionBindHandler
	// InteractionInteractionJoinHandler sets the operation handler for the interaction join operation
	InteractionInteractionJoinHandler interaction.InteractionJoinHandler
	// InteractionInteractionUnbindHandler sets the operation handler for the interaction unbind operation
	InteractionInteractionUnbindHandler interaction.InteractionUnbindHandler
	// TasksJoinHandler sets the operation handler for the join operation
	TasksJoinHandler tasks.JoinHandler
	// ScopesListHandler sets the operation handler for the list operation
	ScopesListHandler scopes.ListHandler
	// ScopesListAllHandler sets the operation handler for the list all operation
	ScopesListAllHandler scopes.ListAllHandler
	// StorageListImagesHandler sets the operation handler for the list images operation
	StorageListImagesHandler storage.ListImagesHandler
	// StorageListVolumesHandler sets the operation handler for the list volumes operation
	StorageListVolumesHandler storage.ListVolumesHandler
	// LoggingLoggingBindHandler sets the operation handler for the logging bind operation
	LoggingLoggingBindHandler logging.LoggingBindHandler
	// LoggingLoggingJoinHandler sets the operation handler for the logging join operation
	LoggingLoggingJoinHandler logging.LoggingJoinHandler
	// LoggingLoggingUnbindHandler sets the operation handler for the logging unbind operation
	LoggingLoggingUnbindHandler logging.LoggingUnbindHandler
	// MiscPingHandler sets the operation handler for the ping operation
	MiscPingHandler misc.PingHandler
	// KvPutValueHandler sets the operation handler for the put value operation
	KvPutValueHandler kv.PutValueHandler
	// TasksRemoveHandler sets the operation handler for the remove operation
	TasksRemoveHandler tasks.RemoveHandler
	// ScopesRemoveContainerHandler sets the operation handler for the remove container operation
	ScopesRemoveContainerHandler scopes.RemoveContainerHandler
	// StorageRemoveVolumeHandler sets the operation handler for the remove volume operation
	StorageRemoveVolumeHandler storage.RemoveVolumeHandler
	// ContainersStateChangeHandler sets the operation handler for the state change operation
	ContainersStateChangeHandler containers.StateChangeHandler
	// TasksUnbindHandler sets the operation handler for the unbind operation
	TasksUnbindHandler tasks.UnbindHandler
	// ScopesUnbindContainerHandler sets the operation handler for the unbind container operation
	ScopesUnbindContainerHandler scopes.UnbindContainerHandler
	// StorageVolumeJoinHandler sets the operation handler for the volume join operation
	StorageVolumeJoinHandler storage.VolumeJoinHandler
	// StorageVolumeStoresListHandler sets the operation handler for the volume stores list operation
	StorageVolumeStoresListHandler storage.VolumeStoresListHandler
	// TasksWaitHandler sets the operation handler for the wait operation
	TasksWaitHandler tasks.WaitHandler
	// StorageWriteImageHandler sets the operation handler for the write image operation
	StorageWriteImageHandler storage.WriteImageHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *PortLayerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *PortLayerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *PortLayerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *PortLayerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *PortLayerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *PortLayerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *PortLayerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the PortLayerAPI
func (o *PortLayerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.ScopesAddContainerHandler == nil {
		unregistered = append(unregistered, "scopes.AddContainerHandler")
	}

	if o.TasksBindHandler == nil {
		unregistered = append(unregistered, "tasks.BindHandler")
	}

	if o.ScopesBindContainerHandler == nil {
		unregistered = append(unregistered, "scopes.BindContainerHandler")
	}

	if o.ContainersCommitHandler == nil {
		unregistered = append(unregistered, "containers.CommitHandler")
	}

	if o.InteractionContainerCloseStdinHandler == nil {
		unregistered = append(unregistered, "interaction.ContainerCloseStdinHandler")
	}

	if o.InteractionContainerGetStderrHandler == nil {
		unregistered = append(unregistered, "interaction.ContainerGetStderrHandler")
	}

	if o.InteractionContainerGetStdoutHandler == nil {
		unregistered = append(unregistered, "interaction.ContainerGetStdoutHandler")
	}

	if o.ContainersContainerRemoveHandler == nil {
		unregistered = append(unregistered, "containers.ContainerRemoveHandler")
	}

	if o.ContainersContainerRenameHandler == nil {
		unregistered = append(unregistered, "containers.ContainerRenameHandler")
	}

	if o.InteractionContainerResizeHandler == nil {
		unregistered = append(unregistered, "interaction.ContainerResizeHandler")
	}

	if o.InteractionContainerSetStdinHandler == nil {
		unregistered = append(unregistered, "interaction.ContainerSetStdinHandler")
	}

	if o.ContainersContainerSignalHandler == nil {
		unregistered = append(unregistered, "containers.ContainerSignalHandler")
	}

	if o.ContainersContainerWaitHandler == nil {
		unregistered = append(unregistered, "containers.ContainerWaitHandler")
	}

	if o.ContainersCreateHandler == nil {
		unregistered = append(unregistered, "containers.CreateHandler")
	}

	if o.StorageCreateImageStoreHandler == nil {
		unregistered = append(unregistered, "storage.CreateImageStoreHandler")
	}

	if o.ScopesCreateScopeHandler == nil {
		unregistered = append(unregistered, "scopes.CreateScopeHandler")
	}

	if o.StorageCreateVolumeHandler == nil {
		unregistered = append(unregistered, "storage.CreateVolumeHandler")
	}

	if o.StorageDeleteImageHandler == nil {
		unregistered = append(unregistered, "storage.DeleteImageHandler")
	}

	if o.ScopesDeleteScopeHandler == nil {
		unregistered = append(unregistered, "scopes.DeleteScopeHandler")
	}

	if o.KvDeleteValueHandler == nil {
		unregistered = append(unregistered, "kv.DeleteValueHandler")
	}

	if o.ContainersGetHandler == nil {
		unregistered = append(unregistered, "containers.GetHandler")
	}

	if o.ScopesGetContainerEndpointsHandler == nil {
		unregistered = append(unregistered, "scopes.GetContainerEndpointsHandler")
	}

	if o.ContainersGetContainerInfoHandler == nil {
		unregistered = append(unregistered, "containers.GetContainerInfoHandler")
	}

	if o.ContainersGetContainerListHandler == nil {
		unregistered = append(unregistered, "containers.GetContainerListHandler")
	}

	if o.ContainersGetContainerLogsHandler == nil {
		unregistered = append(unregistered, "containers.GetContainerLogsHandler")
	}

	if o.ContainersGetContainerStatsHandler == nil {
		unregistered = append(unregistered, "containers.GetContainerStatsHandler")
	}

	if o.EventsGetEventsHandler == nil {
		unregistered = append(unregistered, "events.GetEventsHandler")
	}

	if o.StorageGetImageHandler == nil {
		unregistered = append(unregistered, "storage.GetImageHandler")
	}

	if o.StorageGetImageTarHandler == nil {
		unregistered = append(unregistered, "storage.GetImageTarHandler")
	}

	if o.ContainersGetStateHandler == nil {
		unregistered = append(unregistered, "containers.GetStateHandler")
	}

	if o.MiscGetVCHInfoHandler == nil {
		unregistered = append(unregistered, "misc.GetVCHInfoHandler")
	}

	if o.KvGetValueHandler == nil {
		unregistered = append(unregistered, "kv.GetValueHandler")
	}

	if o.StorageGetVolumeHandler == nil {
		unregistered = append(unregistered, "storage.GetVolumeHandler")
	}

	if o.TasksInspectHandler == nil {
		unregistered = append(unregistered, "tasks.InspectHandler")
	}

	if o.InteractionInteractionBindHandler == nil {
		unregistered = append(unregistered, "interaction.InteractionBindHandler")
	}

	if o.InteractionInteractionJoinHandler == nil {
		unregistered = append(unregistered, "interaction.InteractionJoinHandler")
	}

	if o.InteractionInteractionUnbindHandler == nil {
		unregistered = append(unregistered, "interaction.InteractionUnbindHandler")
	}

	if o.TasksJoinHandler == nil {
		unregistered = append(unregistered, "tasks.JoinHandler")
	}

	if o.ScopesListHandler == nil {
		unregistered = append(unregistered, "scopes.ListHandler")
	}

	if o.ScopesListAllHandler == nil {
		unregistered = append(unregistered, "scopes.ListAllHandler")
	}

	if o.StorageListImagesHandler == nil {
		unregistered = append(unregistered, "storage.ListImagesHandler")
	}

	if o.StorageListVolumesHandler == nil {
		unregistered = append(unregistered, "storage.ListVolumesHandler")
	}

	if o.LoggingLoggingBindHandler == nil {
		unregistered = append(unregistered, "logging.LoggingBindHandler")
	}

	if o.LoggingLoggingJoinHandler == nil {
		unregistered = append(unregistered, "logging.LoggingJoinHandler")
	}

	if o.LoggingLoggingUnbindHandler == nil {
		unregistered = append(unregistered, "logging.LoggingUnbindHandler")
	}

	if o.MiscPingHandler == nil {
		unregistered = append(unregistered, "misc.PingHandler")
	}

	if o.KvPutValueHandler == nil {
		unregistered = append(unregistered, "kv.PutValueHandler")
	}

	if o.TasksRemoveHandler == nil {
		unregistered = append(unregistered, "tasks.RemoveHandler")
	}

	if o.ScopesRemoveContainerHandler == nil {
		unregistered = append(unregistered, "scopes.RemoveContainerHandler")
	}

	if o.StorageRemoveVolumeHandler == nil {
		unregistered = append(unregistered, "storage.RemoveVolumeHandler")
	}

	if o.ContainersStateChangeHandler == nil {
		unregistered = append(unregistered, "containers.StateChangeHandler")
	}

	if o.TasksUnbindHandler == nil {
		unregistered = append(unregistered, "tasks.UnbindHandler")
	}

	if o.ScopesUnbindContainerHandler == nil {
		unregistered = append(unregistered, "scopes.UnbindContainerHandler")
	}

	if o.StorageVolumeJoinHandler == nil {
		unregistered = append(unregistered, "storage.VolumeJoinHandler")
	}

	if o.StorageVolumeStoresListHandler == nil {
		unregistered = append(unregistered, "storage.VolumeStoresListHandler")
	}

	if o.TasksWaitHandler == nil {
		unregistered = append(unregistered, "tasks.WaitHandler")
	}

	if o.StorageWriteImageHandler == nil {
		unregistered = append(unregistered, "storage.WriteImageHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *PortLayerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *PortLayerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *PortLayerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		case "application/raw-stream":
			result["application/raw-stream"] = o.BinConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *PortLayerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *PortLayerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the port layer API
func (o *PortLayerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *PortLayerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/scopes/{scope}/containers"] = scopes.NewAddContainer(o.context, o.ScopesAddContainerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tasks/binding"] = tasks.NewBind(o.context, o.TasksBindHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/scopes/containers/{handle}/binding"] = scopes.NewBindContainer(o.context, o.ScopesBindContainerHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/containers/{handle}"] = containers.NewCommit(o.context, o.ContainersCommitHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/interaction/{id}/stdin"] = interaction.NewContainerCloseStdin(o.context, o.InteractionContainerCloseStdinHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/interaction/{id}/stderr"] = interaction.NewContainerGetStderr(o.context, o.InteractionContainerGetStderrHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/interaction/{id}/stdout"] = interaction.NewContainerGetStdout(o.context, o.InteractionContainerGetStdoutHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/containers/{id}"] = containers.NewContainerRemove(o.context, o.ContainersContainerRemoveHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/containers/{handle}/name"] = containers.NewContainerRename(o.context, o.ContainersContainerRenameHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/interaction/{id}/resize"] = interaction.NewContainerResize(o.context, o.InteractionContainerResizeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/interaction/{id}/stdin"] = interaction.NewContainerSetStdin(o.context, o.InteractionContainerSetStdinHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/signal"] = containers.NewContainerSignal(o.context, o.ContainersContainerSignalHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/wait"] = containers.NewContainerWait(o.context, o.ContainersContainerWaitHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers"] = containers.NewCreate(o.context, o.ContainersCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/storage"] = storage.NewCreateImageStore(o.context, o.StorageCreateImageStoreHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/scopes"] = scopes.NewCreateScope(o.context, o.ScopesCreateScopeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/storage/volumes"] = storage.NewCreateVolume(o.context, o.StorageCreateVolumeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/storage/{store_name}/info/{id}"] = storage.NewDeleteImage(o.context, o.StorageDeleteImageHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/scopes/{idName}"] = scopes.NewDeleteScope(o.context, o.ScopesDeleteScopeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/kv/{key}"] = kv.NewDeleteValue(o.context, o.KvDeleteValueHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}"] = containers.NewGet(o.context, o.ContainersGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scopes/containers/{handleOrId}"] = scopes.NewGetContainerEndpoints(o.context, o.ScopesGetContainerEndpointsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/info/{id}"] = containers.NewGetContainerInfo(o.context, o.ContainersGetContainerInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/list"] = containers.NewGetContainerList(o.context, o.ContainersGetContainerListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/logs"] = containers.NewGetContainerLogs(o.context, o.ContainersGetContainerLogsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/stats"] = containers.NewGetContainerStats(o.context, o.ContainersGetContainerStatsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = events.NewGetEvents(o.context, o.EventsGetEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/{store_name}/info/{id}"] = storage.NewGetImage(o.context, o.StorageGetImageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/{store_name}/tar/{id}"] = storage.NewGetImageTar(o.context, o.StorageGetImageTarHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{handle}/state"] = containers.NewGetState(o.context, o.ContainersGetStateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vch/info"] = misc.NewGetVCHInfo(o.context, o.MiscGetVCHInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/kv/{key}"] = kv.NewGetValue(o.context, o.KvGetValueHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/volumes/{name}"] = storage.NewGetVolume(o.context, o.StorageGetVolumeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tasks"] = tasks.NewInspect(o.context, o.TasksInspectHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/interaction/binding"] = interaction.NewInteractionBind(o.context, o.InteractionInteractionBindHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/interaction"] = interaction.NewInteractionJoin(o.context, o.InteractionInteractionJoinHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/interaction/binding"] = interaction.NewInteractionUnbind(o.context, o.InteractionInteractionUnbindHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tasks"] = tasks.NewJoin(o.context, o.TasksJoinHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scopes/{idName}"] = scopes.NewList(o.context, o.ScopesListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scopes"] = scopes.NewListAll(o.context, o.ScopesListAllHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/{store_name}"] = storage.NewListImages(o.context, o.StorageListImagesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/volumes"] = storage.NewListVolumes(o.context, o.StorageListVolumesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/logging/binding"] = logging.NewLoggingBind(o.context, o.LoggingLoggingBindHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/logging"] = logging.NewLoggingJoin(o.context, o.LoggingLoggingJoinHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/logging/binding"] = logging.NewLoggingUnbind(o.context, o.LoggingLoggingUnbindHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/_ping"] = misc.NewPing(o.context, o.MiscPingHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/kv/{key}"] = kv.NewPutValue(o.context, o.KvPutValueHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tasks"] = tasks.NewRemove(o.context, o.TasksRemoveHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/scopes/{scope}/containers/{handle}"] = scopes.NewRemoveContainer(o.context, o.ScopesRemoveContainerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/storage/volumes/{name}"] = storage.NewRemoveVolume(o.context, o.StorageRemoveVolumeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/containers/{handle}/state"] = containers.NewStateChange(o.context, o.ContainersStateChangeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tasks/binding"] = tasks.NewUnbind(o.context, o.TasksUnbindHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/scopes/containers/{handle}/binding"] = scopes.NewUnbindContainer(o.context, o.ScopesUnbindContainerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/storage/volumes/{name}"] = storage.NewVolumeJoin(o.context, o.StorageVolumeJoinHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/volumestores"] = storage.NewVolumeStoresList(o.context, o.StorageVolumeStoresListHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tasks"] = tasks.NewWait(o.context, o.TasksWaitHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/storage/{store_name}"] = storage.NewWriteImage(o.context, o.StorageWriteImageHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *PortLayerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *PortLayerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

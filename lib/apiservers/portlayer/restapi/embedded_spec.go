package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import "encoding/json"

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Port Layer API",
    "title": "Port Layer API",
    "version": "v0.0.1"
  },
  "basePath": "/",
  "paths": {
    "/_ping": {
      "get": {
        "description": "Pings the server to see if it's running",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "misc"
        ],
        "summary": "ping the portlayer server",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/containers": {
      "post": {
        "description": "Initiates a container create operation",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Initiates a container create operation",
        "operationId": "Create",
        "parameters": [
          {
            "pattern": "/?[a-zA-Z0-9_-]+",
            "type": "string",
            "name": "name",
            "in": "query"
          },
          {
            "name": "createConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerCreateConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContainerCreatedInfo"
            }
          },
          "404": {
            "description": "Create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/info/{id}": {
      "get": {
        "description": "Gets information about a container by id",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "GetContainerInfo",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContainerInfo"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/list": {
      "get": {
        "description": "Gets a list of all containers",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "GetContainerList",
        "parameters": [
          {
            "type": "boolean",
            "name": "all",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContainerInfo"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{handle}": {
      "put": {
        "description": "Commit and close a container handle",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "Commit",
        "parameters": [
          {
            "type": "string",
            "name": "handle",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "wait_time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{handle}/name": {
      "patch": {
        "description": "Rename a container to the new name",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "ContainerRename",
        "parameters": [
          {
            "type": "string",
            "name": "handle",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "New name for the container",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "conflict, name already assigned",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{handle}/state": {
      "get": {
        "description": "Get the current state of the a container",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "GetState",
        "parameters": [
          {
            "type": "string",
            "name": "handle",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContainerGetStateResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Changes the state of a container",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "StateChange",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "name": "handle",
            "in": "path",
            "required": true
          },
          {
            "name": "state",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "RUNNING",
                "STOPPED"
              ],
              "x-nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{id}": {
      "get": {
        "description": "Get a container handle",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Remove a container from existence",
        "consumes": [
          "application/octet-stream"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "ContainerRemove",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "force",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "v",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad parameter"
          },
          "404": {
            "description": "no such container"
          },
          "409": {
            "description": "conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "server error"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{id}/logs": {
      "get": {
        "description": "Gets the container logs by id",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Gets the container logs",
        "operationId": "GetContainerLogs",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "follow",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "since",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "timestamp",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "taillines",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Logs not found"
          },
          "500": {
            "description": "Failed to get logs"
          }
        }
      }
    },
    "/containers/{id}/signal": {
      "post": {
        "description": "Sends a signal to a container by id",
        "consumes": [
          "application/octet-stream"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Signal a running container",
        "operationId": "ContainerSignal",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "signal",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Failed to signal container",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{id}/stats": {
      "get": {
        "description": "Gets the container stats by id",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Gets the container stats",
        "operationId": "GetContainerStats",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "stream",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Stats not found"
          },
          "500": {
            "description": "Failed to get stats"
          }
        }
      }
    },
    "/containers/{id}/wait": {
      "get": {
        "description": "Wait for the container to stop",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "operationId": "ContainerWait",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "timeout",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContainerInfo"
            }
          },
          "404": {
            "description": "Container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Failed to wait on Container",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "description": "Gets portlayer events",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "events"
        ],
        "summary": "Gets portlayer events",
        "operationId": "GetEvents",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary"
            }
          },
          "500": {
            "description": "Failed to get events"
          }
        }
      }
    },
    "/interaction": {
      "post": {
        "description": "Adds interaction capabilities to given handle",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Add interaction capability",
        "operationId": "InteractionJoin",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InteractionJoinConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InteractionJoinResponse"
            }
          },
          "404": {
            "description": "VirtualDevice not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Adding a VirtualDevice failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/interaction/binding": {
      "post": {
        "description": "Enable/bind/activate the VirtualDevice",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Enable/bind/activate the VirtualDevice",
        "operationId": "InteractionBind",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InteractionBindConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InteractionBindResponse"
            }
          },
          "404": {
            "description": "VirtualDevice not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Connecting VirtualDevice failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Disable/unbind/deactivate the VirtualDevice",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Disable/unbind/deactivate the VirtualDevice",
        "operationId": "InteractionUnbind",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InteractionUnbindConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InteractionUnbindResponse"
            }
          },
          "404": {
            "description": "VirtualDevice not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Disconnecting VirtualDevice failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/interaction/{id}/resize": {
      "post": {
        "description": "Resize the container's tty session",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Resize tty session",
        "operationId": "ContainerResize",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "height",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "width",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Container resize failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/interaction/{id}/stderr": {
      "get": {
        "description": "Get a stderr for the container",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Get stderr",
        "operationId": "ContainerGetStderr",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "datetime",
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Failed to get stderr",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/interaction/{id}/stdin": {
      "post": {
        "description": "Set a stdin for the container",
        "consumes": [
          "application/raw-stream"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Set stdin",
        "operationId": "ContainerSetStdin",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "datetime",
            "name": "deadline",
            "in": "query"
          },
          {
            "name": "raw_stream",
            "in": "body",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Failed to Set stdin",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Close a stdin for the container",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Close stdin",
        "operationId": "ContainerCloseStdin",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Failed to Close stdin",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/interaction/{id}/stdout": {
      "get": {
        "description": "Get a stdout for the container",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "interaction"
        ],
        "summary": "Get stdout",
        "operationId": "ContainerGetStdout",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "datetime",
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Failed to get stdout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kv/{key}": {
      "get": {
        "description": "Gets value from k/v store",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "kv"
        ],
        "operationId": "GetValue",
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyValue"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Adds / updates value in k/v store",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "kv"
        ],
        "operationId": "PutValue",
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "name": "key_value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "deletes entry in k/v store",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "kv"
        ],
        "operationId": "DeleteValue",
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logging": {
      "post": {
        "description": "Adds logging capabilities to given handle",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "logging"
        ],
        "summary": "Add logging capability",
        "operationId": "LoggingJoin",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggingJoinConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoggingJoinResponse"
            }
          },
          "404": {
            "description": "VirtualDevice not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Adding a VirtualDevice failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logging/binding": {
      "post": {
        "description": "Enable/bind/activate the VirtualDevice",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "logging"
        ],
        "summary": "Enable/bind/activate the VirtualDevice",
        "operationId": "LoggingBind",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggingBindConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoggingBindResponse"
            }
          },
          "404": {
            "description": "VirtualDevice not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Connecting VirtualDevice failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Disable/unbind/deactivate the VirtualDevice",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "logging"
        ],
        "summary": "Disable/unbind/deactivate the VirtualDevice",
        "operationId": "LoggingUnbind",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggingUnbindConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoggingUnbindResponse"
            }
          },
          "404": {
            "description": "VirtualDevice not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Disconnecting VirtualDevice failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scopes": {
      "get": {
        "tags": [
          "scopes"
        ],
        "operationId": "ListAll",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScopeConfig"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "scopes"
        ],
        "summary": "Create a new scope",
        "operationId": "CreateScope",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ScopeConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ScopeConfig"
            }
          },
          "409": {
            "description": "A scope with that name exists.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scopes/containers/{handleOrId}": {
      "get": {
        "description": "Get a list of the endpoints for a container",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scopes"
        ],
        "operationId": "GetContainerEndpoints",
        "parameters": [
          {
            "type": "string",
            "name": "handleOrId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndpointConfig"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scopes/containers/{handle}/binding": {
      "post": {
        "description": "Perform scope initialization for each of the scopes the container belongs to. Network initialization may include, for example, assigning addresses on a scope.",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scopes"
        ],
        "operationId": "BindContainer",
        "parameters": [
          {
            "type": "string",
            "name": "handle",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BindContainerResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scopes"
        ],
        "operationId": "UnbindContainer",
        "parameters": [
          {
            "type": "string",
            "name": "handle",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UnbindContainerResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scopes/{idName}": {
      "get": {
        "tags": [
          "scopes"
        ],
        "operationId": "List",
        "parameters": [
          {
            "type": "string",
            "name": "idName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScopeConfig"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scopes"
        ],
        "operationId": "DeleteScope",
        "parameters": [
          {
            "type": "string",
            "name": "idName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scopes/{scope}/containers": {
      "post": {
        "description": "Add a container to scopes modifying the container VM's config as necessary",
        "tags": [
          "scopes"
        ],
        "operationId": "AddContainer",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScopesAddContainerConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scopes/{scope}/containers/{handle}": {
      "delete": {
        "description": "Remove a container from a scope",
        "tags": [
          "scopes"
        ],
        "operationId": "RemoveContainer",
        "parameters": [
          {
            "type": "string",
            "name": "handle",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage": {
      "post": {
        "description": "Creates a location to store images",
        "tags": [
          "storage"
        ],
        "summary": "creates an image store",
        "operationId": "CreateImageStore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImageStore"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/StoreUrl"
            }
          },
          "409": {
            "description": "An image store with that name already exists.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/volumes": {
      "get": {
        "description": "Get a list of available volumes",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "ListVolumes",
        "parameters": [
          {
            "type": "string",
            "name": "filterString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VolumeResponse"
              }
            }
          },
          "500": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Create a volume",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "summary": "Creates a Volume with metadata that is provided from the personality",
        "operationId": "CreateVolume",
        "parameters": [
          {
            "name": "VolumeRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "404": {
            "description": "VolumeStore Does not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Volume already exists by that ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/volumes/{name}": {
      "get": {
        "description": "Get info about a volume",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "GetVolume",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "404": {
            "description": "Volume not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Attach a volume to a container",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "VolumeJoin",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "JoinArgs",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeJoinConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Volume not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "storage"
        ],
        "summary": "Remove a volume",
        "operationId": "RemoveVolume",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Volume successfully removed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Volume not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Volume in use",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/volumestores": {
      "get": {
        "description": "Get a list of available volume store locations",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "VolumeStoresList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VolumeStoresListResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{store_name}": {
      "get": {
        "description": "Retrieves a list of images given a list of image IDs, or all images in the image store if no param is passed.",
        "tags": [
          "storage"
        ],
        "summary": "Retrieve a list of images in an image store",
        "operationId": "ListImages",
        "parameters": [
          {
            "type": "string",
            "name": "store_name",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "collectionFormat": "csv"
            },
            "name": "ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new image layer in an image store",
        "consumes": [
          "application/octet-stream"
        ],
        "tags": [
          "storage"
        ],
        "summary": "Creates a new image layer",
        "operationId": "WriteImage",
        "parameters": [
          {
            "name": "image_file",
            "in": "body",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          {
            "type": "string",
            "name": "store_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "image_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "parent_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "sum",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "name": "metadatakey",
            "in": "query"
          },
          {
            "type": "string",
            "x-nullable": false,
            "name": "metadataval",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{store_name}/info/{id}": {
      "get": {
        "description": "Inspect an image by id in an image store",
        "tags": [
          "storage"
        ],
        "summary": "Inspect an image",
        "operationId": "GetImage",
        "parameters": [
          {
            "type": "string",
            "name": "store_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an image by id in an image store",
        "tags": [
          "storage"
        ],
        "summary": "Delete an image",
        "operationId": "DeleteImage",
        "parameters": [
          {
            "type": "string",
            "name": "store_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "collectionFormat": "csv"
            },
            "name": "keepNodes",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "423": {
            "description": "In use",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{store_name}/tar/{id}": {
      "get": {
        "description": "Get an image by id in an image store as a tar file",
        "tags": [
          "storage"
        ],
        "summary": "Get an image as a tar file",
        "operationId": "GetImageTar",
        "parameters": [
          {
            "type": "string",
            "name": "store_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "Not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "description": "Initiates an task inspect operation",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Initiates an task inspect operation",
        "operationId": "Inspect",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskInspectConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskInspectResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Inspect of task failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Initiates an task wait operation",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Initiates an task wait operation",
        "operationId": "Wait",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskWaitConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Wait of task failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Initiates an task join operation",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Initiates an task join operation",
        "operationId": "Join",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskJoinConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskJoinResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Join of task failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Initiates an task remove operation",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Initiates an task remove operation",
        "operationId": "Remove",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskRemoveConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskRemoveResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Removal of task failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tasks/binding": {
      "post": {
        "description": "Activate a task that exists within the context of the provided handle",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Activate an existing task",
        "operationId": "Bind",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskBindConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskBindResponse"
            }
          },
          "404": {
            "description": "No such task",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Activating task failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Deactivate a task that exists within the context of the provided handle",
        "consumes": [
          "application/octet-stream",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Deactivate an existing task",
        "operationId": "Unbind",
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskUnbindConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskUnbindResponse"
            }
          },
          "404": {
            "description": "No such task",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Deactivating task failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vch/info": {
      "get": {
        "description": "Gets vital information about the vch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "misc"
        ],
        "operationId": "GetVCHInfo",
        "responses": {
          "200": {
            "description": "retrieval success",
            "schema": {
              "$ref": "#/definitions/VCHInfo"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BindContainerResponse": {
      "type": "object",
      "required": [
        "handle",
        "endpoints"
      ],
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointConfig"
          }
        },
        "handle": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "ContainerConfig": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "attachStderr": {
          "type": "boolean",
          "x-nullable": true
        },
        "attachStdin": {
          "type": "boolean",
          "x-nullable": true
        },
        "attachStdout": {
          "type": "boolean",
          "x-nullable": true
        },
        "consoleSize": {
          "type": "object",
          "properties": {
            "height": {
              "type": "integer"
            },
            "width": {
              "type": "integer"
            }
          }
        },
        "containerId": {
          "type": "string"
        },
        "createTime": {
          "type": "integer"
        },
        "hostName": {
          "type": "string",
          "x-nullable": true
        },
        "imageId": {
          "type": "string"
        },
        "layerId": {
          "type": "string"
        },
        "logPath": {
          "type": "string"
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "openStdin": {
          "type": "boolean",
          "x-nullable": true
        },
        "repoName": {
          "type": "string",
          "x-nullable": true
        },
        "reservation": {
          "$ref": "#/definitions/ReservationConfig"
        },
        "restartCount": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "storageSize": {
          "type": "integer"
        },
        "tty": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "ContainerCreateConfig": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "image": {
          "type": "string"
        },
        "imageStore": {
          "$ref": "#/definitions/ImageStore"
        },
        "layer": {
          "type": "string"
        },
        "memoryMB": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "networkDisabled": {
          "type": "boolean"
        },
        "numCPUs": {
          "type": "integer",
          "format": "int64"
        },
        "repoName": {
          "type": "string"
        }
      }
    },
    "ContainerCreatedInfo": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "ContainerGetStateResponse": {
      "type": "object",
      "required": [
        "handle",
        "state"
      ],
      "properties": {
        "handle": {
          "type": "string",
          "x-nullable": false
        },
        "state": {
          "type": "string",
          "enum": [
            "RUNNING",
            "STOPPED"
          ],
          "x-nullable": false
        }
      }
    },
    "ContainerInfo": {
      "type": "object",
      "properties": {
        "HostConfig": {
          "$ref": "#/definitions/HostConfig"
        },
        "containerConfig": {
          "$ref": "#/definitions/ContainerConfig"
        },
        "dataVersion": {
          "type": "integer",
          "format": "int64"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointConfig"
          }
        },
        "processConfig": {
          "$ref": "#/definitions/ProcessConfig"
        },
        "volumeConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeConfig"
          }
        }
      }
    },
    "EndpointConfig": {
      "type": "object",
      "required": [
        "id",
        "name",
        "scope",
        "address",
        "gateway",
        "container",
        "ports",
        "aliases",
        "nameservers"
      ],
      "properties": {
        "address": {
          "type": "string",
          "x-nullable": false
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "container": {
          "type": "string",
          "x-nullable": false
        },
        "gateway": {
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "type": "string",
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "nameservers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "HostConfig": {
      "description": "Information about the virtual container host (VCH)",
      "type": "object",
      "properties": {
        "architecture": {
          "type": "string"
        },
        "kernelVersion": {
          "type": "string"
        },
        "ostype": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reservation": {
          "$ref": "#/definitions/ReservationConfig"
        }
      }
    },
    "Image": {
      "type": "object",
      "required": [
        "ID",
        "Store"
      ],
      "properties": {
        "ID": {
          "type": "string",
          "x-nullable": false
        },
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Parent": {
          "type": "string"
        },
        "SelfLink": {
          "type": "string"
        },
        "Store": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "ImageStore": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "InteractionBindConfig": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "InteractionBindResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "InteractionJoinConfig": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "InteractionJoinResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "InteractionUnbindConfig": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "InteractionUnbindResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "KeyValue": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string",
          "x-nullable": false
        },
        "Value": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "LoggingBindConfig": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "LoggingBindResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "LoggingJoinConfig": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "LoggingJoinResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "LoggingUnbindConfig": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "LoggingUnbindResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "NetworkConfig": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkName": {
          "type": "string",
          "x-nullable": false
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProcessConfig": {
      "type": "object",
      "properties": {
        "env": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errorMsg": {
          "type": "string"
        },
        "execArgs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "execPath": {
          "type": "string"
        },
        "exitCode": {
          "type": "integer",
          "format": "int32"
        },
        "pid": {
          "type": "integer"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "stopTime": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "type": "string"
        },
        "workingDir": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ReservationConfig": {
      "type": "object",
      "properties": {
        "cpuCount": {
          "type": "integer"
        },
        "memoryLimit": {
          "type": "integer"
        }
      }
    },
    "ScopeConfig": {
      "type": "object",
      "required": [
        "name",
        "scopeType"
      ],
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointConfig"
          }
        },
        "gateway": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "ipam": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "scopeType": {
          "type": "string",
          "x-nullable": false
        },
        "subnet": {
          "type": "string"
        }
      }
    },
    "ScopesAddContainerConfig": {
      "type": "object",
      "required": [
        "networkConfig",
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "string",
          "x-nullable": false
        },
        "networkConfig": {
          "$ref": "#/definitions/NetworkConfig"
        }
      }
    },
    "StoreUrl": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "TaskBindConfig": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "TaskBindResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "TaskInspectConfig": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "TaskInspectResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "exitCode": {
          "type": "integer",
          "x-nullable": false
        },
        "id": {
          "type": "string",
          "x-nullable": false
        },
        "openStderr": {
          "type": "boolean",
          "default": false,
          "x-nullable": false
        },
        "openStdin": {
          "type": "boolean",
          "default": false,
          "x-nullable": false
        },
        "openStdout": {
          "type": "boolean",
          "default": false,
          "x-nullable": false
        },
        "pid": {
          "type": "integer",
          "x-nullable": false
        },
        "processConfig": {
          "$ref": "#/definitions/ProcessConfig"
        },
        "running": {
          "type": "boolean",
          "x-nullable": false
        },
        "tty": {
          "type": "boolean",
          "default": false,
          "x-nullable": false
        },
        "user": {
          "type": "string"
        }
      }
    },
    "TaskJoinConfig": {
      "type": "object",
      "required": [
        "handle",
        "path"
      ],
      "properties": {
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attach": {
          "type": "boolean",
          "default": true,
          "x-nullable": false
        },
        "env": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        },
        "openStdin": {
          "type": "boolean",
          "default": false,
          "x-nullable": false
        },
        "path": {
          "type": "string",
          "x-nullable": false
        },
        "stopSignal": {
          "type": "string"
        },
        "tty": {
          "type": "boolean",
          "default": false,
          "x-nullable": false
        },
        "user": {
          "type": "string"
        },
        "workingDir": {
          "type": "string"
        }
      }
    },
    "TaskJoinResponse": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "TaskRemoveConfig": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "TaskRemoveResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "TaskUnbindConfig": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "TaskUnbindResponse": {
      "type": "object",
      "required": [
        "handle"
      ],
      "properties": {
        "handle": {
          "type": "object"
        }
      }
    },
    "TaskWaitConfig": {
      "type": "object",
      "required": [
        "handle",
        "id"
      ],
      "properties": {
        "handle": {
          "type": "object"
        },
        "id": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "UnbindContainerResponse": {
      "type": "object",
      "required": [
        "handle",
        "endpoints"
      ],
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointConfig"
          }
        },
        "handle": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "VCHInfo": {
      "type": "object",
      "properties": {
        "cpuMhz": {
          "type": "integer",
          "format": "int64"
        },
        "cpuUsage": {
          "type": "integer",
          "format": "int64"
        },
        "hostOS": {
          "type": "string"
        },
        "hostOSVersion": {
          "type": "string"
        },
        "hostProductName": {
          "type": "string"
        },
        "memUsage": {
          "type": "integer",
          "format": "int64"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "VolumeConfig": {
      "type": "object",
      "properties": {
        "label": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mountPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "readWrite": {
          "type": "boolean"
        }
      }
    },
    "VolumeJoinConfig": {
      "type": "object",
      "required": [
        "Handle",
        "MountPath",
        "Flags"
      ],
      "properties": {
        "Flags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Handle": {
          "type": "string",
          "x-nullable": false
        },
        "MountPath": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "VolumeRequest": {
      "type": "object",
      "required": [
        "Name",
        "Store",
        "Capacity",
        "Driver"
      ],
      "properties": {
        "Capacity": {
          "type": "integer",
          "x-nullable": false
        },
        "Driver": {
          "type": "string",
          "x-nullable": false
        },
        "DriverArgs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string",
          "x-nullable": false
        },
        "Store": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "VolumeResponse": {
      "type": "object",
      "required": [
        "Name",
        "Label",
        "Store",
        "Driver"
      ],
      "properties": {
        "Driver": {
          "type": "string",
          "x-nullable": false
        },
        "Label": {
          "description": "this is the label used to mount the block device",
          "type": "string",
          "x-nullable": false
        },
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string",
          "x-nullable": false
        },
        "Store": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "VolumeStoresListResponse": {
      "type": "object",
      "required": [
        "Stores"
      ],
      "properties": {
        "Stores": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}`))
}
